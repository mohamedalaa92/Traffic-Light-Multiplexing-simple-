
iti_2.9TL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002468  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00002468  000024dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002040  00000000  00000000  0000250c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e53  00000000  00000000  0000454c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000539f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000054df  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000564f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007298  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008183  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008f30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000931d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009aeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 a2 11 	call	0x2344	; 0x2344 <main>
      7a:	0c 94 32 12 	jmp	0x2464	; 0x2464 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 fb 11 	jmp	0x23f6	; 0x23f6 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 17 12 	jmp	0x242e	; 0x242e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 07 12 	jmp	0x240e	; 0x240e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 23 12 	jmp	0x2446	; 0x2446 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 07 12 	jmp	0x240e	; 0x240e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 23 12 	jmp	0x2446	; 0x2446 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 fb 11 	jmp	0x23f6	; 0x23f6 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 17 12 	jmp	0x242e	; 0x242e <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 07 12 	jmp	0x240e	; 0x240e <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 23 12 	jmp	0x2446	; 0x2446 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 07 12 	jmp	0x240e	; 0x240e <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 23 12 	jmp	0x2446	; 0x2446 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 07 12 	jmp	0x240e	; 0x240e <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 23 12 	jmp	0x2446	; 0x2446 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 27 12 	jmp	0x244e	; 0x244e <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_u8SetPinDirection>:

/************************** SET_BIT & SET_PORT DIRECTION **********************************/

/********** this function shall set the direction for the desired pin *********************/
u8 DIO_u8SetPinDirection(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Direction)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	28 97       	sbiw	r28, 0x08	; 8
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	8a 83       	std	Y+2, r24	; 0x02
     b4c:	6b 83       	std	Y+3, r22	; 0x03
     b4e:	4c 83       	std	Y+4, r20	; 0x04
	/*make error state be 1 if the user entered the wrong input to the function*/
	u8 Local_u8ErrorState = 0;
     b50:	19 82       	std	Y+1, r1	; 0x01
	/*check if the input is in between bits (0-7) or send error */
	if (Copy_u8Pin <= DIO_u8PIN7)
     b52:	8b 81       	ldd	r24, Y+3	; 0x03
     b54:	88 30       	cpi	r24, 0x08	; 8
     b56:	08 f0       	brcs	.+2      	; 0xb5a <DIO_u8SetPinDirection+0x24>
     b58:	f4 c0       	rjmp	.+488    	; 0xd42 <DIO_u8SetPinDirection+0x20c>
	{
		/*check if the direction is output or input or, else send error */
		if ( Copy_u8Direction == DIO_u8PIN_INPUT)
     b5a:	8c 81       	ldd	r24, Y+4	; 0x04
     b5c:	88 23       	and	r24, r24
     b5e:	09 f0       	breq	.+2      	; 0xb62 <DIO_u8SetPinDirection+0x2c>
     b60:	77 c0       	rjmp	.+238    	; 0xc50 <DIO_u8SetPinDirection+0x11a>
		{
			switch ( Copy_u8Port )
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	28 2f       	mov	r18, r24
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	38 87       	std	Y+8, r19	; 0x08
     b6a:	2f 83       	std	Y+7, r18	; 0x07
     b6c:	8f 81       	ldd	r24, Y+7	; 0x07
     b6e:	98 85       	ldd	r25, Y+8	; 0x08
     b70:	81 30       	cpi	r24, 0x01	; 1
     b72:	91 05       	cpc	r25, r1
     b74:	59 f1       	breq	.+86     	; 0xbcc <DIO_u8SetPinDirection+0x96>
     b76:	2f 81       	ldd	r18, Y+7	; 0x07
     b78:	38 85       	ldd	r19, Y+8	; 0x08
     b7a:	22 30       	cpi	r18, 0x02	; 2
     b7c:	31 05       	cpc	r19, r1
     b7e:	2c f4       	brge	.+10     	; 0xb8a <DIO_u8SetPinDirection+0x54>
     b80:	8f 81       	ldd	r24, Y+7	; 0x07
     b82:	98 85       	ldd	r25, Y+8	; 0x08
     b84:	00 97       	sbiw	r24, 0x00	; 0
     b86:	69 f0       	breq	.+26     	; 0xba2 <DIO_u8SetPinDirection+0x6c>
     b88:	60 c0       	rjmp	.+192    	; 0xc4a <DIO_u8SetPinDirection+0x114>
     b8a:	2f 81       	ldd	r18, Y+7	; 0x07
     b8c:	38 85       	ldd	r19, Y+8	; 0x08
     b8e:	22 30       	cpi	r18, 0x02	; 2
     b90:	31 05       	cpc	r19, r1
     b92:	89 f1       	breq	.+98     	; 0xbf6 <DIO_u8SetPinDirection+0xc0>
     b94:	8f 81       	ldd	r24, Y+7	; 0x07
     b96:	98 85       	ldd	r25, Y+8	; 0x08
     b98:	83 30       	cpi	r24, 0x03	; 3
     b9a:	91 05       	cpc	r25, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <DIO_u8SetPinDirection+0x6a>
     b9e:	40 c0       	rjmp	.+128    	; 0xc20 <DIO_u8SetPinDirection+0xea>
     ba0:	54 c0       	rjmp	.+168    	; 0xc4a <DIO_u8SetPinDirection+0x114>
			{
			/*check if the correct port or, else send error */
			case DIO_u8PORTA : CLR_BIT(DDRA,Copy_u8Pin); break;
     ba2:	aa e3       	ldi	r26, 0x3A	; 58
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	ea e3       	ldi	r30, 0x3A	; 58
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	48 2f       	mov	r20, r24
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	28 2f       	mov	r18, r24
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	02 2e       	mov	r0, r18
     bba:	02 c0       	rjmp	.+4      	; 0xbc0 <DIO_u8SetPinDirection+0x8a>
     bbc:	88 0f       	add	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	0a 94       	dec	r0
     bc2:	e2 f7       	brpl	.-8      	; 0xbbc <DIO_u8SetPinDirection+0x86>
     bc4:	80 95       	com	r24
     bc6:	84 23       	and	r24, r20
     bc8:	8c 93       	st	X, r24
     bca:	bd c0       	rjmp	.+378    	; 0xd46 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB : CLR_BIT(DDRB,Copy_u8Pin); break;
     bcc:	a7 e3       	ldi	r26, 0x37	; 55
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e7 e3       	ldi	r30, 0x37	; 55
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	48 2f       	mov	r20, r24
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	28 2f       	mov	r18, r24
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	02 2e       	mov	r0, r18
     be4:	02 c0       	rjmp	.+4      	; 0xbea <DIO_u8SetPinDirection+0xb4>
     be6:	88 0f       	add	r24, r24
     be8:	99 1f       	adc	r25, r25
     bea:	0a 94       	dec	r0
     bec:	e2 f7       	brpl	.-8      	; 0xbe6 <DIO_u8SetPinDirection+0xb0>
     bee:	80 95       	com	r24
     bf0:	84 23       	and	r24, r20
     bf2:	8c 93       	st	X, r24
     bf4:	a8 c0       	rjmp	.+336    	; 0xd46 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC : CLR_BIT(DDRC,Copy_u8Pin); break;
     bf6:	a4 e3       	ldi	r26, 0x34	; 52
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e4 e3       	ldi	r30, 0x34	; 52
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	48 2f       	mov	r20, r24
     c02:	8b 81       	ldd	r24, Y+3	; 0x03
     c04:	28 2f       	mov	r18, r24
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	02 2e       	mov	r0, r18
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <DIO_u8SetPinDirection+0xde>
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	0a 94       	dec	r0
     c16:	e2 f7       	brpl	.-8      	; 0xc10 <DIO_u8SetPinDirection+0xda>
     c18:	80 95       	com	r24
     c1a:	84 23       	and	r24, r20
     c1c:	8c 93       	st	X, r24
     c1e:	93 c0       	rjmp	.+294    	; 0xd46 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD : CLR_BIT(DDRD,Copy_u8Pin); break;
     c20:	a1 e3       	ldi	r26, 0x31	; 49
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	e1 e3       	ldi	r30, 0x31	; 49
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	48 2f       	mov	r20, r24
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	28 2f       	mov	r18, r24
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	02 2e       	mov	r0, r18
     c38:	02 c0       	rjmp	.+4      	; 0xc3e <DIO_u8SetPinDirection+0x108>
     c3a:	88 0f       	add	r24, r24
     c3c:	99 1f       	adc	r25, r25
     c3e:	0a 94       	dec	r0
     c40:	e2 f7       	brpl	.-8      	; 0xc3a <DIO_u8SetPinDirection+0x104>
     c42:	80 95       	com	r24
     c44:	84 23       	and	r24, r20
     c46:	8c 93       	st	X, r24
     c48:	7e c0       	rjmp	.+252    	; 0xd46 <DIO_u8SetPinDirection+0x210>
			default : Local_u8ErrorState = 1 ;
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	89 83       	std	Y+1, r24	; 0x01
     c4e:	7b c0       	rjmp	.+246    	; 0xd46 <DIO_u8SetPinDirection+0x210>
			}

		}
		else if ( Copy_u8Direction == DIO_u8PIN_OUTPUT)
     c50:	8c 81       	ldd	r24, Y+4	; 0x04
     c52:	81 30       	cpi	r24, 0x01	; 1
     c54:	09 f0       	breq	.+2      	; 0xc58 <DIO_u8SetPinDirection+0x122>
     c56:	72 c0       	rjmp	.+228    	; 0xd3c <DIO_u8SetPinDirection+0x206>
		{
			switch ( Copy_u8Port )
     c58:	8a 81       	ldd	r24, Y+2	; 0x02
     c5a:	28 2f       	mov	r18, r24
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	3e 83       	std	Y+6, r19	; 0x06
     c60:	2d 83       	std	Y+5, r18	; 0x05
     c62:	8d 81       	ldd	r24, Y+5	; 0x05
     c64:	9e 81       	ldd	r25, Y+6	; 0x06
     c66:	81 30       	cpi	r24, 0x01	; 1
     c68:	91 05       	cpc	r25, r1
     c6a:	49 f1       	breq	.+82     	; 0xcbe <DIO_u8SetPinDirection+0x188>
     c6c:	2d 81       	ldd	r18, Y+5	; 0x05
     c6e:	3e 81       	ldd	r19, Y+6	; 0x06
     c70:	22 30       	cpi	r18, 0x02	; 2
     c72:	31 05       	cpc	r19, r1
     c74:	2c f4       	brge	.+10     	; 0xc80 <DIO_u8SetPinDirection+0x14a>
     c76:	8d 81       	ldd	r24, Y+5	; 0x05
     c78:	9e 81       	ldd	r25, Y+6	; 0x06
     c7a:	00 97       	sbiw	r24, 0x00	; 0
     c7c:	61 f0       	breq	.+24     	; 0xc96 <DIO_u8SetPinDirection+0x160>
     c7e:	5b c0       	rjmp	.+182    	; 0xd36 <DIO_u8SetPinDirection+0x200>
     c80:	2d 81       	ldd	r18, Y+5	; 0x05
     c82:	3e 81       	ldd	r19, Y+6	; 0x06
     c84:	22 30       	cpi	r18, 0x02	; 2
     c86:	31 05       	cpc	r19, r1
     c88:	71 f1       	breq	.+92     	; 0xce6 <DIO_u8SetPinDirection+0x1b0>
     c8a:	8d 81       	ldd	r24, Y+5	; 0x05
     c8c:	9e 81       	ldd	r25, Y+6	; 0x06
     c8e:	83 30       	cpi	r24, 0x03	; 3
     c90:	91 05       	cpc	r25, r1
     c92:	e9 f1       	breq	.+122    	; 0xd0e <DIO_u8SetPinDirection+0x1d8>
     c94:	50 c0       	rjmp	.+160    	; 0xd36 <DIO_u8SetPinDirection+0x200>
			{
			/*check if the correct port or, else send error */
			case DIO_u8PORTA : SET_BIT(DDRA,Copy_u8Pin); break;
     c96:	aa e3       	ldi	r26, 0x3A	; 58
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	ea e3       	ldi	r30, 0x3A	; 58
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	48 2f       	mov	r20, r24
     ca2:	8b 81       	ldd	r24, Y+3	; 0x03
     ca4:	28 2f       	mov	r18, r24
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	02 2e       	mov	r0, r18
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <DIO_u8SetPinDirection+0x17e>
     cb0:	88 0f       	add	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	0a 94       	dec	r0
     cb6:	e2 f7       	brpl	.-8      	; 0xcb0 <DIO_u8SetPinDirection+0x17a>
     cb8:	84 2b       	or	r24, r20
     cba:	8c 93       	st	X, r24
     cbc:	44 c0       	rjmp	.+136    	; 0xd46 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB : SET_BIT(DDRB,Copy_u8Pin); break;
     cbe:	a7 e3       	ldi	r26, 0x37	; 55
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	e7 e3       	ldi	r30, 0x37	; 55
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	48 2f       	mov	r20, r24
     cca:	8b 81       	ldd	r24, Y+3	; 0x03
     ccc:	28 2f       	mov	r18, r24
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	02 2e       	mov	r0, r18
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <DIO_u8SetPinDirection+0x1a6>
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	0a 94       	dec	r0
     cde:	e2 f7       	brpl	.-8      	; 0xcd8 <DIO_u8SetPinDirection+0x1a2>
     ce0:	84 2b       	or	r24, r20
     ce2:	8c 93       	st	X, r24
     ce4:	30 c0       	rjmp	.+96     	; 0xd46 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC : SET_BIT(DDRC,Copy_u8Pin); break;
     ce6:	a4 e3       	ldi	r26, 0x34	; 52
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e4 e3       	ldi	r30, 0x34	; 52
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	48 2f       	mov	r20, r24
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	02 2e       	mov	r0, r18
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <DIO_u8SetPinDirection+0x1ce>
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	0a 94       	dec	r0
     d06:	e2 f7       	brpl	.-8      	; 0xd00 <DIO_u8SetPinDirection+0x1ca>
     d08:	84 2b       	or	r24, r20
     d0a:	8c 93       	st	X, r24
     d0c:	1c c0       	rjmp	.+56     	; 0xd46 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD : SET_BIT(DDRD,Copy_u8Pin); break;
     d0e:	a1 e3       	ldi	r26, 0x31	; 49
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e1 e3       	ldi	r30, 0x31	; 49
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	48 2f       	mov	r20, r24
     d1a:	8b 81       	ldd	r24, Y+3	; 0x03
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	02 2e       	mov	r0, r18
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <DIO_u8SetPinDirection+0x1f6>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	0a 94       	dec	r0
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <DIO_u8SetPinDirection+0x1f2>
     d30:	84 2b       	or	r24, r20
     d32:	8c 93       	st	X, r24
     d34:	08 c0       	rjmp	.+16     	; 0xd46 <DIO_u8SetPinDirection+0x210>
			default : Local_u8ErrorState = 1 ;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	89 83       	std	Y+1, r24	; 0x01
     d3a:	05 c0       	rjmp	.+10     	; 0xd46 <DIO_u8SetPinDirection+0x210>

		}
		else
		{
			/*if wrong direction*/
			Local_u8ErrorState = 1 ;
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	89 83       	std	Y+1, r24	; 0x01
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <DIO_u8SetPinDirection+0x210>

	}
	else
	{
		/*if wrong pin number*/
		Local_u8ErrorState = 1 ;
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
     d46:	89 81       	ldd	r24, Y+1	; 0x01
}
     d48:	28 96       	adiw	r28, 0x08	; 8
     d4a:	0f b6       	in	r0, 0x3f	; 63
     d4c:	f8 94       	cli
     d4e:	de bf       	out	0x3e, r29	; 62
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	cd bf       	out	0x3d, r28	; 61
     d54:	cf 91       	pop	r28
     d56:	df 91       	pop	r29
     d58:	08 95       	ret

00000d5a <DIO_u8SetPortDirection>:
/********** this function shall set the direction for the desired port ********************/
u8 DIO_u8SetPortDirection(u8 Copy_u8Port , u8 Copy_u8Direction)
{
     d5a:	df 93       	push	r29
     d5c:	cf 93       	push	r28
     d5e:	00 d0       	rcall	.+0      	; 0xd60 <DIO_u8SetPortDirection+0x6>
     d60:	00 d0       	rcall	.+0      	; 0xd62 <DIO_u8SetPortDirection+0x8>
     d62:	0f 92       	push	r0
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
     d68:	8a 83       	std	Y+2, r24	; 0x02
     d6a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0;
     d6c:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Port)
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	28 2f       	mov	r18, r24
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	3d 83       	std	Y+5, r19	; 0x05
     d76:	2c 83       	std	Y+4, r18	; 0x04
     d78:	8c 81       	ldd	r24, Y+4	; 0x04
     d7a:	9d 81       	ldd	r25, Y+5	; 0x05
     d7c:	81 30       	cpi	r24, 0x01	; 1
     d7e:	91 05       	cpc	r25, r1
     d80:	d1 f0       	breq	.+52     	; 0xdb6 <DIO_u8SetPortDirection+0x5c>
     d82:	2c 81       	ldd	r18, Y+4	; 0x04
     d84:	3d 81       	ldd	r19, Y+5	; 0x05
     d86:	22 30       	cpi	r18, 0x02	; 2
     d88:	31 05       	cpc	r19, r1
     d8a:	2c f4       	brge	.+10     	; 0xd96 <DIO_u8SetPortDirection+0x3c>
     d8c:	8c 81       	ldd	r24, Y+4	; 0x04
     d8e:	9d 81       	ldd	r25, Y+5	; 0x05
     d90:	00 97       	sbiw	r24, 0x00	; 0
     d92:	61 f0       	breq	.+24     	; 0xdac <DIO_u8SetPortDirection+0x52>
     d94:	1f c0       	rjmp	.+62     	; 0xdd4 <DIO_u8SetPortDirection+0x7a>
     d96:	2c 81       	ldd	r18, Y+4	; 0x04
     d98:	3d 81       	ldd	r19, Y+5	; 0x05
     d9a:	22 30       	cpi	r18, 0x02	; 2
     d9c:	31 05       	cpc	r19, r1
     d9e:	81 f0       	breq	.+32     	; 0xdc0 <DIO_u8SetPortDirection+0x66>
     da0:	8c 81       	ldd	r24, Y+4	; 0x04
     da2:	9d 81       	ldd	r25, Y+5	; 0x05
     da4:	83 30       	cpi	r24, 0x03	; 3
     da6:	91 05       	cpc	r25, r1
     da8:	81 f0       	breq	.+32     	; 0xdca <DIO_u8SetPortDirection+0x70>
     daa:	14 c0       	rjmp	.+40     	; 0xdd4 <DIO_u8SetPortDirection+0x7a>
	{
	/*check if the correct port or, else send error */
	case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
     dac:	ea e3       	ldi	r30, 0x3A	; 58
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	8b 81       	ldd	r24, Y+3	; 0x03
     db2:	80 83       	st	Z, r24
     db4:	11 c0       	rjmp	.+34     	; 0xdd8 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
     db6:	e7 e3       	ldi	r30, 0x37	; 55
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	8b 81       	ldd	r24, Y+3	; 0x03
     dbc:	80 83       	st	Z, r24
     dbe:	0c c0       	rjmp	.+24     	; 0xdd8 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
     dc0:	e4 e3       	ldi	r30, 0x34	; 52
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	80 83       	st	Z, r24
     dc8:	07 c0       	rjmp	.+14     	; 0xdd8 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD : DDRD = Copy_u8Direction; break;
     dca:	e1 e3       	ldi	r30, 0x31	; 49
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
     dd0:	80 83       	st	Z, r24
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <DIO_u8SetPortDirection+0x7e>
	default : Local_u8ErrorState = 1 ;
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
}
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	cf 91       	pop	r28
     de6:	df 91       	pop	r29
     de8:	08 95       	ret

00000dea <DIO_u8SetPinValue>:

/************************** SET_BIT & SET_PORT VALUE **************************************/

/********** this function shall set the value for the desired pin *************************/
u8 DIO_u8SetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value)
{
     dea:	df 93       	push	r29
     dec:	cf 93       	push	r28
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
     df2:	28 97       	sbiw	r28, 0x08	; 8
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	de bf       	out	0x3e, r29	; 62
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	cd bf       	out	0x3d, r28	; 61
     dfe:	8a 83       	std	Y+2, r24	; 0x02
     e00:	6b 83       	std	Y+3, r22	; 0x03
     e02:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0;
     e04:	19 82       	std	Y+1, r1	; 0x01
	/*check if the correct port or, else send error */
	if (Copy_u8Pin <= DIO_u8PIN7)
     e06:	8b 81       	ldd	r24, Y+3	; 0x03
     e08:	88 30       	cpi	r24, 0x08	; 8
     e0a:	08 f0       	brcs	.+2      	; 0xe0e <DIO_u8SetPinValue+0x24>
     e0c:	f4 c0       	rjmp	.+488    	; 0xff6 <DIO_u8SetPinValue+0x20c>
	{
		/*check if the value is high or low or, else send error */
		if ( Copy_u8Value == DIO_u8PIN_LOW)
     e0e:	8c 81       	ldd	r24, Y+4	; 0x04
     e10:	88 23       	and	r24, r24
     e12:	09 f0       	breq	.+2      	; 0xe16 <DIO_u8SetPinValue+0x2c>
     e14:	77 c0       	rjmp	.+238    	; 0xf04 <DIO_u8SetPinValue+0x11a>
		{
			switch ( Copy_u8Port )
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	38 87       	std	Y+8, r19	; 0x08
     e1e:	2f 83       	std	Y+7, r18	; 0x07
     e20:	8f 81       	ldd	r24, Y+7	; 0x07
     e22:	98 85       	ldd	r25, Y+8	; 0x08
     e24:	81 30       	cpi	r24, 0x01	; 1
     e26:	91 05       	cpc	r25, r1
     e28:	59 f1       	breq	.+86     	; 0xe80 <DIO_u8SetPinValue+0x96>
     e2a:	2f 81       	ldd	r18, Y+7	; 0x07
     e2c:	38 85       	ldd	r19, Y+8	; 0x08
     e2e:	22 30       	cpi	r18, 0x02	; 2
     e30:	31 05       	cpc	r19, r1
     e32:	2c f4       	brge	.+10     	; 0xe3e <DIO_u8SetPinValue+0x54>
     e34:	8f 81       	ldd	r24, Y+7	; 0x07
     e36:	98 85       	ldd	r25, Y+8	; 0x08
     e38:	00 97       	sbiw	r24, 0x00	; 0
     e3a:	69 f0       	breq	.+26     	; 0xe56 <DIO_u8SetPinValue+0x6c>
     e3c:	60 c0       	rjmp	.+192    	; 0xefe <DIO_u8SetPinValue+0x114>
     e3e:	2f 81       	ldd	r18, Y+7	; 0x07
     e40:	38 85       	ldd	r19, Y+8	; 0x08
     e42:	22 30       	cpi	r18, 0x02	; 2
     e44:	31 05       	cpc	r19, r1
     e46:	89 f1       	breq	.+98     	; 0xeaa <DIO_u8SetPinValue+0xc0>
     e48:	8f 81       	ldd	r24, Y+7	; 0x07
     e4a:	98 85       	ldd	r25, Y+8	; 0x08
     e4c:	83 30       	cpi	r24, 0x03	; 3
     e4e:	91 05       	cpc	r25, r1
     e50:	09 f4       	brne	.+2      	; 0xe54 <DIO_u8SetPinValue+0x6a>
     e52:	40 c0       	rjmp	.+128    	; 0xed4 <DIO_u8SetPinValue+0xea>
     e54:	54 c0       	rjmp	.+168    	; 0xefe <DIO_u8SetPinValue+0x114>
			{
			/*check if the correct port or, else send error */
			case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8Pin); break;
     e56:	ab e3       	ldi	r26, 0x3B	; 59
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	eb e3       	ldi	r30, 0x3B	; 59
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	48 2f       	mov	r20, r24
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	02 2e       	mov	r0, r18
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <DIO_u8SetPinValue+0x8a>
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	0a 94       	dec	r0
     e76:	e2 f7       	brpl	.-8      	; 0xe70 <DIO_u8SetPinValue+0x86>
     e78:	80 95       	com	r24
     e7a:	84 23       	and	r24, r20
     e7c:	8c 93       	st	X, r24
     e7e:	bd c0       	rjmp	.+378    	; 0xffa <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8Pin); break;
     e80:	a8 e3       	ldi	r26, 0x38	; 56
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e8 e3       	ldi	r30, 0x38	; 56
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	48 2f       	mov	r20, r24
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	02 2e       	mov	r0, r18
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <DIO_u8SetPinValue+0xb4>
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	0a 94       	dec	r0
     ea0:	e2 f7       	brpl	.-8      	; 0xe9a <DIO_u8SetPinValue+0xb0>
     ea2:	80 95       	com	r24
     ea4:	84 23       	and	r24, r20
     ea6:	8c 93       	st	X, r24
     ea8:	a8 c0       	rjmp	.+336    	; 0xffa <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8Pin); break;
     eaa:	a5 e3       	ldi	r26, 0x35	; 53
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e5 e3       	ldi	r30, 0x35	; 53
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	48 2f       	mov	r20, r24
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	02 2e       	mov	r0, r18
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <DIO_u8SetPinValue+0xde>
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	0a 94       	dec	r0
     eca:	e2 f7       	brpl	.-8      	; 0xec4 <DIO_u8SetPinValue+0xda>
     ecc:	80 95       	com	r24
     ece:	84 23       	and	r24, r20
     ed0:	8c 93       	st	X, r24
     ed2:	93 c0       	rjmp	.+294    	; 0xffa <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8Pin); break;
     ed4:	a2 e3       	ldi	r26, 0x32	; 50
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e2 e3       	ldi	r30, 0x32	; 50
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	48 2f       	mov	r20, r24
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	02 2e       	mov	r0, r18
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <DIO_u8SetPinValue+0x108>
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	0a 94       	dec	r0
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <DIO_u8SetPinValue+0x104>
     ef6:	80 95       	com	r24
     ef8:	84 23       	and	r24, r20
     efa:	8c 93       	st	X, r24
     efc:	7e c0       	rjmp	.+252    	; 0xffa <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorState = 1 ;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	89 83       	std	Y+1, r24	; 0x01
     f02:	7b c0       	rjmp	.+246    	; 0xffa <DIO_u8SetPinValue+0x210>
			}

		}
		else if ( Copy_u8Value == DIO_u8PIN_HIGH)
     f04:	8c 81       	ldd	r24, Y+4	; 0x04
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	09 f0       	breq	.+2      	; 0xf0c <DIO_u8SetPinValue+0x122>
     f0a:	72 c0       	rjmp	.+228    	; 0xff0 <DIO_u8SetPinValue+0x206>
		{
			switch ( Copy_u8Port )
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	3e 83       	std	Y+6, r19	; 0x06
     f14:	2d 83       	std	Y+5, r18	; 0x05
     f16:	8d 81       	ldd	r24, Y+5	; 0x05
     f18:	9e 81       	ldd	r25, Y+6	; 0x06
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	91 05       	cpc	r25, r1
     f1e:	49 f1       	breq	.+82     	; 0xf72 <DIO_u8SetPinValue+0x188>
     f20:	2d 81       	ldd	r18, Y+5	; 0x05
     f22:	3e 81       	ldd	r19, Y+6	; 0x06
     f24:	22 30       	cpi	r18, 0x02	; 2
     f26:	31 05       	cpc	r19, r1
     f28:	2c f4       	brge	.+10     	; 0xf34 <DIO_u8SetPinValue+0x14a>
     f2a:	8d 81       	ldd	r24, Y+5	; 0x05
     f2c:	9e 81       	ldd	r25, Y+6	; 0x06
     f2e:	00 97       	sbiw	r24, 0x00	; 0
     f30:	61 f0       	breq	.+24     	; 0xf4a <DIO_u8SetPinValue+0x160>
     f32:	5b c0       	rjmp	.+182    	; 0xfea <DIO_u8SetPinValue+0x200>
     f34:	2d 81       	ldd	r18, Y+5	; 0x05
     f36:	3e 81       	ldd	r19, Y+6	; 0x06
     f38:	22 30       	cpi	r18, 0x02	; 2
     f3a:	31 05       	cpc	r19, r1
     f3c:	71 f1       	breq	.+92     	; 0xf9a <DIO_u8SetPinValue+0x1b0>
     f3e:	8d 81       	ldd	r24, Y+5	; 0x05
     f40:	9e 81       	ldd	r25, Y+6	; 0x06
     f42:	83 30       	cpi	r24, 0x03	; 3
     f44:	91 05       	cpc	r25, r1
     f46:	e9 f1       	breq	.+122    	; 0xfc2 <DIO_u8SetPinValue+0x1d8>
     f48:	50 c0       	rjmp	.+160    	; 0xfea <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8Pin); break;
     f4a:	ab e3       	ldi	r26, 0x3B	; 59
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	eb e3       	ldi	r30, 0x3B	; 59
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	48 2f       	mov	r20, r24
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	02 2e       	mov	r0, r18
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <DIO_u8SetPinValue+0x17e>
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	0a 94       	dec	r0
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <DIO_u8SetPinValue+0x17a>
     f6c:	84 2b       	or	r24, r20
     f6e:	8c 93       	st	X, r24
     f70:	44 c0       	rjmp	.+136    	; 0xffa <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8Pin); break;
     f72:	a8 e3       	ldi	r26, 0x38	; 56
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e8 e3       	ldi	r30, 0x38	; 56
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	48 2f       	mov	r20, r24
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	02 2e       	mov	r0, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <DIO_u8SetPinValue+0x1a6>
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	0a 94       	dec	r0
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <DIO_u8SetPinValue+0x1a2>
     f94:	84 2b       	or	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	30 c0       	rjmp	.+96     	; 0xffa <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8Pin); break;
     f9a:	a5 e3       	ldi	r26, 0x35	; 53
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e5 e3       	ldi	r30, 0x35	; 53
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	48 2f       	mov	r20, r24
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	02 2e       	mov	r0, r18
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <DIO_u8SetPinValue+0x1ce>
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	0a 94       	dec	r0
     fba:	e2 f7       	brpl	.-8      	; 0xfb4 <DIO_u8SetPinValue+0x1ca>
     fbc:	84 2b       	or	r24, r20
     fbe:	8c 93       	st	X, r24
     fc0:	1c c0       	rjmp	.+56     	; 0xffa <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8Pin); break;
     fc2:	a2 e3       	ldi	r26, 0x32	; 50
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e2 e3       	ldi	r30, 0x32	; 50
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	48 2f       	mov	r20, r24
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	02 2e       	mov	r0, r18
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <DIO_u8SetPinValue+0x1f6>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	0a 94       	dec	r0
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <DIO_u8SetPinValue+0x1f2>
     fe4:	84 2b       	or	r24, r20
     fe6:	8c 93       	st	X, r24
     fe8:	08 c0       	rjmp	.+16     	; 0xffa <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorState = 1 ;
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	89 83       	std	Y+1, r24	; 0x01
     fee:	05 c0       	rjmp	.+10     	; 0xffa <DIO_u8SetPinValue+0x210>

		}
		else
		{
			/*if wrong value (not high or low)*/
			Local_u8ErrorState = 1 ;
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	89 83       	std	Y+1, r24	; 0x01
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <DIO_u8SetPinValue+0x210>

	}
	else
	{
		/*if wrong pin number*/
		Local_u8ErrorState = 1 ;
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
}
     ffc:	28 96       	adiw	r28, 0x08	; 8
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	cd bf       	out	0x3d, r28	; 61
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <DIO_u8SetPortValue>:
/********** this function shall set the value for the desired port *************************/
u8 DIO_u8SetPortValue(u8 Copy_u8Port , u8 Copy_u8Value)
{
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	00 d0       	rcall	.+0      	; 0x1014 <DIO_u8SetPortValue+0x6>
    1014:	00 d0       	rcall	.+0      	; 0x1016 <DIO_u8SetPortValue+0x8>
    1016:	0f 92       	push	r0
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	8a 83       	std	Y+2, r24	; 0x02
    101e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0;
    1020:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Port)
    1022:	8a 81       	ldd	r24, Y+2	; 0x02
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	3d 83       	std	Y+5, r19	; 0x05
    102a:	2c 83       	std	Y+4, r18	; 0x04
    102c:	8c 81       	ldd	r24, Y+4	; 0x04
    102e:	9d 81       	ldd	r25, Y+5	; 0x05
    1030:	81 30       	cpi	r24, 0x01	; 1
    1032:	91 05       	cpc	r25, r1
    1034:	d1 f0       	breq	.+52     	; 0x106a <DIO_u8SetPortValue+0x5c>
    1036:	2c 81       	ldd	r18, Y+4	; 0x04
    1038:	3d 81       	ldd	r19, Y+5	; 0x05
    103a:	22 30       	cpi	r18, 0x02	; 2
    103c:	31 05       	cpc	r19, r1
    103e:	2c f4       	brge	.+10     	; 0x104a <DIO_u8SetPortValue+0x3c>
    1040:	8c 81       	ldd	r24, Y+4	; 0x04
    1042:	9d 81       	ldd	r25, Y+5	; 0x05
    1044:	00 97       	sbiw	r24, 0x00	; 0
    1046:	61 f0       	breq	.+24     	; 0x1060 <DIO_u8SetPortValue+0x52>
    1048:	1f c0       	rjmp	.+62     	; 0x1088 <DIO_u8SetPortValue+0x7a>
    104a:	2c 81       	ldd	r18, Y+4	; 0x04
    104c:	3d 81       	ldd	r19, Y+5	; 0x05
    104e:	22 30       	cpi	r18, 0x02	; 2
    1050:	31 05       	cpc	r19, r1
    1052:	81 f0       	breq	.+32     	; 0x1074 <DIO_u8SetPortValue+0x66>
    1054:	8c 81       	ldd	r24, Y+4	; 0x04
    1056:	9d 81       	ldd	r25, Y+5	; 0x05
    1058:	83 30       	cpi	r24, 0x03	; 3
    105a:	91 05       	cpc	r25, r1
    105c:	81 f0       	breq	.+32     	; 0x107e <DIO_u8SetPortValue+0x70>
    105e:	14 c0       	rjmp	.+40     	; 0x1088 <DIO_u8SetPortValue+0x7a>
	{
	/*check if the correct port or, else send error */
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
    1060:	eb e3       	ldi	r30, 0x3B	; 59
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	80 83       	st	Z, r24
    1068:	11 c0       	rjmp	.+34     	; 0x108c <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
    106a:	e8 e3       	ldi	r30, 0x38	; 56
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	80 83       	st	Z, r24
    1072:	0c c0       	rjmp	.+24     	; 0x108c <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC : PORTC = Copy_u8Value; break;
    1074:	e5 e3       	ldi	r30, 0x35	; 53
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	80 83       	st	Z, r24
    107c:	07 c0       	rjmp	.+14     	; 0x108c <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD : PORTD = Copy_u8Value; break;
    107e:	e2 e3       	ldi	r30, 0x32	; 50
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	80 83       	st	Z, r24
    1086:	02 c0       	rjmp	.+4      	; 0x108c <DIO_u8SetPortValue+0x7e>
	default : Local_u8ErrorState = 1 ;
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    108c:	89 81       	ldd	r24, Y+1	; 0x01
}
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	08 95       	ret

0000109e <DIO_u8GetPinValue>:

/************************** GET_BIT & GET_PORT VALUE **************************************/

/********** this function shall get the value for the desired pin *************************/
u8 DIO_u8GetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8* Copy_pu8Value)
{
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	27 97       	sbiw	r28, 0x07	; 7
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	f8 94       	cli
    10ac:	de bf       	out	0x3e, r29	; 62
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	cd bf       	out	0x3d, r28	; 61
    10b2:	8a 83       	std	Y+2, r24	; 0x02
    10b4:	6b 83       	std	Y+3, r22	; 0x03
    10b6:	5d 83       	std	Y+5, r21	; 0x05
    10b8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0;
    10ba:	19 82       	std	Y+1, r1	; 0x01
	if ((Copy_pu8Value != NULL) && (Copy_u8Pin <= DIO_u8PIN7))
    10bc:	8c 81       	ldd	r24, Y+4	; 0x04
    10be:	9d 81       	ldd	r25, Y+5	; 0x05
    10c0:	00 97       	sbiw	r24, 0x00	; 0
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <DIO_u8GetPinValue+0x28>
    10c4:	78 c0       	rjmp	.+240    	; 0x11b6 <DIO_u8GetPinValue+0x118>
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	88 30       	cpi	r24, 0x08	; 8
    10ca:	08 f0       	brcs	.+2      	; 0x10ce <DIO_u8GetPinValue+0x30>
    10cc:	74 c0       	rjmp	.+232    	; 0x11b6 <DIO_u8GetPinValue+0x118>
	{
		switch (Copy_u8Port)
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	3f 83       	std	Y+7, r19	; 0x07
    10d6:	2e 83       	std	Y+6, r18	; 0x06
    10d8:	4e 81       	ldd	r20, Y+6	; 0x06
    10da:	5f 81       	ldd	r21, Y+7	; 0x07
    10dc:	41 30       	cpi	r20, 0x01	; 1
    10de:	51 05       	cpc	r21, r1
    10e0:	59 f1       	breq	.+86     	; 0x1138 <DIO_u8GetPinValue+0x9a>
    10e2:	8e 81       	ldd	r24, Y+6	; 0x06
    10e4:	9f 81       	ldd	r25, Y+7	; 0x07
    10e6:	82 30       	cpi	r24, 0x02	; 2
    10e8:	91 05       	cpc	r25, r1
    10ea:	34 f4       	brge	.+12     	; 0x10f8 <DIO_u8GetPinValue+0x5a>
    10ec:	2e 81       	ldd	r18, Y+6	; 0x06
    10ee:	3f 81       	ldd	r19, Y+7	; 0x07
    10f0:	21 15       	cp	r18, r1
    10f2:	31 05       	cpc	r19, r1
    10f4:	69 f0       	breq	.+26     	; 0x1110 <DIO_u8GetPinValue+0x72>
    10f6:	5c c0       	rjmp	.+184    	; 0x11b0 <DIO_u8GetPinValue+0x112>
    10f8:	4e 81       	ldd	r20, Y+6	; 0x06
    10fa:	5f 81       	ldd	r21, Y+7	; 0x07
    10fc:	42 30       	cpi	r20, 0x02	; 2
    10fe:	51 05       	cpc	r21, r1
    1100:	79 f1       	breq	.+94     	; 0x1160 <DIO_u8GetPinValue+0xc2>
    1102:	8e 81       	ldd	r24, Y+6	; 0x06
    1104:	9f 81       	ldd	r25, Y+7	; 0x07
    1106:	83 30       	cpi	r24, 0x03	; 3
    1108:	91 05       	cpc	r25, r1
    110a:	09 f4       	brne	.+2      	; 0x110e <DIO_u8GetPinValue+0x70>
    110c:	3d c0       	rjmp	.+122    	; 0x1188 <DIO_u8GetPinValue+0xea>
    110e:	50 c0       	rjmp	.+160    	; 0x11b0 <DIO_u8GetPinValue+0x112>
		{
		/*check if the correct port or, else send error */
		case DIO_u8PORTA : *Copy_pu8Value = GET_BIT(PINA , Copy_u8Pin); break;
    1110:	e9 e3       	ldi	r30, 0x39	; 57
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	88 2f       	mov	r24, r24
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	a9 01       	movw	r20, r18
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <DIO_u8GetPinValue+0x8a>
    1124:	55 95       	asr	r21
    1126:	47 95       	ror	r20
    1128:	8a 95       	dec	r24
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <DIO_u8GetPinValue+0x86>
    112c:	ca 01       	movw	r24, r20
    112e:	81 70       	andi	r24, 0x01	; 1
    1130:	ec 81       	ldd	r30, Y+4	; 0x04
    1132:	fd 81       	ldd	r31, Y+5	; 0x05
    1134:	80 83       	st	Z, r24
    1136:	41 c0       	rjmp	.+130    	; 0x11ba <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB : *Copy_pu8Value = GET_BIT(PINB , Copy_u8Pin); break;
    1138:	e6 e3       	ldi	r30, 0x36	; 54
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	88 2f       	mov	r24, r24
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	a9 01       	movw	r20, r18
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <DIO_u8GetPinValue+0xb2>
    114c:	55 95       	asr	r21
    114e:	47 95       	ror	r20
    1150:	8a 95       	dec	r24
    1152:	e2 f7       	brpl	.-8      	; 0x114c <DIO_u8GetPinValue+0xae>
    1154:	ca 01       	movw	r24, r20
    1156:	81 70       	andi	r24, 0x01	; 1
    1158:	ec 81       	ldd	r30, Y+4	; 0x04
    115a:	fd 81       	ldd	r31, Y+5	; 0x05
    115c:	80 83       	st	Z, r24
    115e:	2d c0       	rjmp	.+90     	; 0x11ba <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC : *Copy_pu8Value = GET_BIT(PINC , Copy_u8Pin); break;
    1160:	e3 e3       	ldi	r30, 0x33	; 51
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	88 2f       	mov	r24, r24
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	a9 01       	movw	r20, r18
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <DIO_u8GetPinValue+0xda>
    1174:	55 95       	asr	r21
    1176:	47 95       	ror	r20
    1178:	8a 95       	dec	r24
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <DIO_u8GetPinValue+0xd6>
    117c:	ca 01       	movw	r24, r20
    117e:	81 70       	andi	r24, 0x01	; 1
    1180:	ec 81       	ldd	r30, Y+4	; 0x04
    1182:	fd 81       	ldd	r31, Y+5	; 0x05
    1184:	80 83       	st	Z, r24
    1186:	19 c0       	rjmp	.+50     	; 0x11ba <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD : *Copy_pu8Value = GET_BIT(PIND , Copy_u8Pin); break;
    1188:	e0 e3       	ldi	r30, 0x30	; 48
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	88 2f       	mov	r24, r24
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	a9 01       	movw	r20, r18
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <DIO_u8GetPinValue+0x102>
    119c:	55 95       	asr	r21
    119e:	47 95       	ror	r20
    11a0:	8a 95       	dec	r24
    11a2:	e2 f7       	brpl	.-8      	; 0x119c <DIO_u8GetPinValue+0xfe>
    11a4:	ca 01       	movw	r24, r20
    11a6:	81 70       	andi	r24, 0x01	; 1
    11a8:	ec 81       	ldd	r30, Y+4	; 0x04
    11aa:	fd 81       	ldd	r31, Y+5	; 0x05
    11ac:	80 83       	st	Z, r24
    11ae:	05 c0       	rjmp	.+10     	; 0x11ba <DIO_u8GetPinValue+0x11c>
		default : Local_u8ErrorState = 1  ;
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	89 83       	std	Y+1, r24	; 0x01
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState = 1 ;
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    11bc:	27 96       	adiw	r28, 0x07	; 7
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	de bf       	out	0x3e, r29	; 62
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	cd bf       	out	0x3d, r28	; 61
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	08 95       	ret

000011ce <DIO_u8TogglePinValue>:

/************************** TOGGLE_BIT & TOGGLE_PORT VALUE **************************************/

/********** this function shall toggle the value for the desired pin **********************/
u8 DIO_u8TogglePinValue(u8 Copy_u8Port , u8 Copy_u8Pin)
{
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <DIO_u8TogglePinValue+0x6>
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <DIO_u8TogglePinValue+0x8>
    11d6:	0f 92       	push	r0
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	8a 83       	std	Y+2, r24	; 0x02
    11de:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0;
    11e0:	19 82       	std	Y+1, r1	; 0x01
	/*check if the correct port or, else send error */
	if (Copy_u8Pin <= DIO_u8PIN7)
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	88 30       	cpi	r24, 0x08	; 8
    11e6:	08 f0       	brcs	.+2      	; 0x11ea <DIO_u8TogglePinValue+0x1c>
    11e8:	72 c0       	rjmp	.+228    	; 0x12ce <DIO_u8TogglePinValue+0x100>
	{
		switch ( Copy_u8Port )
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	3d 83       	std	Y+5, r19	; 0x05
    11f2:	2c 83       	std	Y+4, r18	; 0x04
    11f4:	8c 81       	ldd	r24, Y+4	; 0x04
    11f6:	9d 81       	ldd	r25, Y+5	; 0x05
    11f8:	81 30       	cpi	r24, 0x01	; 1
    11fa:	91 05       	cpc	r25, r1
    11fc:	49 f1       	breq	.+82     	; 0x1250 <DIO_u8TogglePinValue+0x82>
    11fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1200:	3d 81       	ldd	r19, Y+5	; 0x05
    1202:	22 30       	cpi	r18, 0x02	; 2
    1204:	31 05       	cpc	r19, r1
    1206:	2c f4       	brge	.+10     	; 0x1212 <DIO_u8TogglePinValue+0x44>
    1208:	8c 81       	ldd	r24, Y+4	; 0x04
    120a:	9d 81       	ldd	r25, Y+5	; 0x05
    120c:	00 97       	sbiw	r24, 0x00	; 0
    120e:	61 f0       	breq	.+24     	; 0x1228 <DIO_u8TogglePinValue+0x5a>
    1210:	5b c0       	rjmp	.+182    	; 0x12c8 <DIO_u8TogglePinValue+0xfa>
    1212:	2c 81       	ldd	r18, Y+4	; 0x04
    1214:	3d 81       	ldd	r19, Y+5	; 0x05
    1216:	22 30       	cpi	r18, 0x02	; 2
    1218:	31 05       	cpc	r19, r1
    121a:	71 f1       	breq	.+92     	; 0x1278 <DIO_u8TogglePinValue+0xaa>
    121c:	8c 81       	ldd	r24, Y+4	; 0x04
    121e:	9d 81       	ldd	r25, Y+5	; 0x05
    1220:	83 30       	cpi	r24, 0x03	; 3
    1222:	91 05       	cpc	r25, r1
    1224:	e9 f1       	breq	.+122    	; 0x12a0 <DIO_u8TogglePinValue+0xd2>
    1226:	50 c0       	rjmp	.+160    	; 0x12c8 <DIO_u8TogglePinValue+0xfa>
		{
		/*check if the correct port or, else send error */
		case DIO_u8PORTA : TOG_BIT(PORTA,Copy_u8Pin); break;
    1228:	ab e3       	ldi	r26, 0x3B	; 59
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	eb e3       	ldi	r30, 0x3B	; 59
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	48 2f       	mov	r20, r24
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 2e       	mov	r0, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <DIO_u8TogglePinValue+0x78>
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	0a 94       	dec	r0
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <DIO_u8TogglePinValue+0x74>
    124a:	84 27       	eor	r24, r20
    124c:	8c 93       	st	X, r24
    124e:	41 c0       	rjmp	.+130    	; 0x12d2 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTB : TOG_BIT(PORTB,Copy_u8Pin); break;
    1250:	a8 e3       	ldi	r26, 0x38	; 56
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e8 e3       	ldi	r30, 0x38	; 56
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	48 2f       	mov	r20, r24
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	02 2e       	mov	r0, r18
    1268:	02 c0       	rjmp	.+4      	; 0x126e <DIO_u8TogglePinValue+0xa0>
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	0a 94       	dec	r0
    1270:	e2 f7       	brpl	.-8      	; 0x126a <DIO_u8TogglePinValue+0x9c>
    1272:	84 27       	eor	r24, r20
    1274:	8c 93       	st	X, r24
    1276:	2d c0       	rjmp	.+90     	; 0x12d2 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTC : TOG_BIT(PORTC,Copy_u8Pin); break;
    1278:	a5 e3       	ldi	r26, 0x35	; 53
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e5 e3       	ldi	r30, 0x35	; 53
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	48 2f       	mov	r20, r24
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 2e       	mov	r0, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <DIO_u8TogglePinValue+0xc8>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	0a 94       	dec	r0
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <DIO_u8TogglePinValue+0xc4>
    129a:	84 27       	eor	r24, r20
    129c:	8c 93       	st	X, r24
    129e:	19 c0       	rjmp	.+50     	; 0x12d2 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTD : TOG_BIT(PORTD,Copy_u8Pin); break;
    12a0:	a2 e3       	ldi	r26, 0x32	; 50
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e2 e3       	ldi	r30, 0x32	; 50
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	48 2f       	mov	r20, r24
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	02 2e       	mov	r0, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <DIO_u8TogglePinValue+0xf0>
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	0a 94       	dec	r0
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <DIO_u8TogglePinValue+0xec>
    12c2:	84 27       	eor	r24, r20
    12c4:	8c 93       	st	X, r24
    12c6:	05 c0       	rjmp	.+10     	; 0x12d2 <DIO_u8TogglePinValue+0x104>
		default : Local_u8ErrorState = 1 ;
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	89 83       	std	Y+1, r24	; 0x01
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <DIO_u8TogglePinValue+0x104>

	}
	else
	{
		/*if wrong pin number*/
		Local_u8ErrorState = 1 ;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	cf 91       	pop	r28
    12e0:	df 91       	pop	r29
    12e2:	08 95       	ret

000012e4 <DIO_u8TogglePortValue>:

/********** this function shall toggle the value for the desired port **********************/
u8 DIO_u8TogglePortValue(u8 Copy_u8Port)
{
    12e4:	df 93       	push	r29
    12e6:	cf 93       	push	r28
    12e8:	00 d0       	rcall	.+0      	; 0x12ea <DIO_u8TogglePortValue+0x6>
    12ea:	00 d0       	rcall	.+0      	; 0x12ec <DIO_u8TogglePortValue+0x8>
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = 0;
    12f2:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Port)
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	3c 83       	std	Y+4, r19	; 0x04
    12fc:	2b 83       	std	Y+3, r18	; 0x03
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	9c 81       	ldd	r25, Y+4	; 0x04
    1302:	81 30       	cpi	r24, 0x01	; 1
    1304:	91 05       	cpc	r25, r1
    1306:	e9 f0       	breq	.+58     	; 0x1342 <DIO_u8TogglePortValue+0x5e>
    1308:	2b 81       	ldd	r18, Y+3	; 0x03
    130a:	3c 81       	ldd	r19, Y+4	; 0x04
    130c:	22 30       	cpi	r18, 0x02	; 2
    130e:	31 05       	cpc	r19, r1
    1310:	2c f4       	brge	.+10     	; 0x131c <DIO_u8TogglePortValue+0x38>
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	9c 81       	ldd	r25, Y+4	; 0x04
    1316:	00 97       	sbiw	r24, 0x00	; 0
    1318:	61 f0       	breq	.+24     	; 0x1332 <DIO_u8TogglePortValue+0x4e>
    131a:	2b c0       	rjmp	.+86     	; 0x1372 <DIO_u8TogglePortValue+0x8e>
    131c:	2b 81       	ldd	r18, Y+3	; 0x03
    131e:	3c 81       	ldd	r19, Y+4	; 0x04
    1320:	22 30       	cpi	r18, 0x02	; 2
    1322:	31 05       	cpc	r19, r1
    1324:	b1 f0       	breq	.+44     	; 0x1352 <DIO_u8TogglePortValue+0x6e>
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	9c 81       	ldd	r25, Y+4	; 0x04
    132a:	83 30       	cpi	r24, 0x03	; 3
    132c:	91 05       	cpc	r25, r1
    132e:	c9 f0       	breq	.+50     	; 0x1362 <DIO_u8TogglePortValue+0x7e>
    1330:	20 c0       	rjmp	.+64     	; 0x1372 <DIO_u8TogglePortValue+0x8e>
	{
	/*check if the correct port or, else send error */
	case DIO_u8PORTA : PORTA = ~PORTA;  break;
    1332:	ab e3       	ldi	r26, 0x3B	; 59
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	eb e3       	ldi	r30, 0x3B	; 59
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	80 95       	com	r24
    133e:	8c 93       	st	X, r24
    1340:	1a c0       	rjmp	.+52     	; 0x1376 <DIO_u8TogglePortValue+0x92>
	case DIO_u8PORTB : PORTB = ~PORTB;  break;
    1342:	a8 e3       	ldi	r26, 0x38	; 56
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e8 e3       	ldi	r30, 0x38	; 56
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	80 95       	com	r24
    134e:	8c 93       	st	X, r24
    1350:	12 c0       	rjmp	.+36     	; 0x1376 <DIO_u8TogglePortValue+0x92>
	case DIO_u8PORTC : PORTC = ~PORTC;  break;
    1352:	a5 e3       	ldi	r26, 0x35	; 53
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	e5 e3       	ldi	r30, 0x35	; 53
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	80 95       	com	r24
    135e:	8c 93       	st	X, r24
    1360:	0a c0       	rjmp	.+20     	; 0x1376 <DIO_u8TogglePortValue+0x92>
	case DIO_u8PORTD : PORTD = ~PORTD;  break;
    1362:	a2 e3       	ldi	r26, 0x32	; 50
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e2 e3       	ldi	r30, 0x32	; 50
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	80 95       	com	r24
    136e:	8c 93       	st	X, r24
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <DIO_u8TogglePortValue+0x92>
	default : Local_u8ErrorState = 1 ;
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    1376:	89 81       	ldd	r24, Y+1	; 0x01
}
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <DIO_u8InitPinPullUp>:


/********** this function shall control the pull up for the desired pin *******************/
u8 DIO_u8InitPinPullUp(u8 Copy_u8Port , u8 Copy_u8Pin)
{
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	00 d0       	rcall	.+0      	; 0x138c <DIO_u8InitPinPullUp+0x6>
    138c:	00 d0       	rcall	.+0      	; 0x138e <DIO_u8InitPinPullUp+0x8>
    138e:	0f 92       	push	r0
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	8a 83       	std	Y+2, r24	; 0x02
    1396:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0;
    1398:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Pin <= DIO_u8PIN7)
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	88 30       	cpi	r24, 0x08	; 8
    139e:	08 f0       	brcs	.+2      	; 0x13a2 <DIO_u8InitPinPullUp+0x1c>
    13a0:	72 c0       	rjmp	.+228    	; 0x1486 <DIO_u8InitPinPullUp+0x100>
	{
		switch (Copy_u8Port)
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	3d 83       	std	Y+5, r19	; 0x05
    13aa:	2c 83       	std	Y+4, r18	; 0x04
    13ac:	8c 81       	ldd	r24, Y+4	; 0x04
    13ae:	9d 81       	ldd	r25, Y+5	; 0x05
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	91 05       	cpc	r25, r1
    13b4:	49 f1       	breq	.+82     	; 0x1408 <DIO_u8InitPinPullUp+0x82>
    13b6:	2c 81       	ldd	r18, Y+4	; 0x04
    13b8:	3d 81       	ldd	r19, Y+5	; 0x05
    13ba:	22 30       	cpi	r18, 0x02	; 2
    13bc:	31 05       	cpc	r19, r1
    13be:	2c f4       	brge	.+10     	; 0x13ca <DIO_u8InitPinPullUp+0x44>
    13c0:	8c 81       	ldd	r24, Y+4	; 0x04
    13c2:	9d 81       	ldd	r25, Y+5	; 0x05
    13c4:	00 97       	sbiw	r24, 0x00	; 0
    13c6:	61 f0       	breq	.+24     	; 0x13e0 <DIO_u8InitPinPullUp+0x5a>
    13c8:	5b c0       	rjmp	.+182    	; 0x1480 <DIO_u8InitPinPullUp+0xfa>
    13ca:	2c 81       	ldd	r18, Y+4	; 0x04
    13cc:	3d 81       	ldd	r19, Y+5	; 0x05
    13ce:	22 30       	cpi	r18, 0x02	; 2
    13d0:	31 05       	cpc	r19, r1
    13d2:	71 f1       	breq	.+92     	; 0x1430 <DIO_u8InitPinPullUp+0xaa>
    13d4:	8c 81       	ldd	r24, Y+4	; 0x04
    13d6:	9d 81       	ldd	r25, Y+5	; 0x05
    13d8:	83 30       	cpi	r24, 0x03	; 3
    13da:	91 05       	cpc	r25, r1
    13dc:	e9 f1       	breq	.+122    	; 0x1458 <DIO_u8InitPinPullUp+0xd2>
    13de:	50 c0       	rjmp	.+160    	; 0x1480 <DIO_u8InitPinPullUp+0xfa>
		{
		/*check if the correct port or, else send error */
		case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8Pin); break;
    13e0:	ab e3       	ldi	r26, 0x3B	; 59
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	eb e3       	ldi	r30, 0x3B	; 59
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	48 2f       	mov	r20, r24
    13ec:	8b 81       	ldd	r24, Y+3	; 0x03
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 2e       	mov	r0, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <DIO_u8InitPinPullUp+0x78>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	0a 94       	dec	r0
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <DIO_u8InitPinPullUp+0x74>
    1402:	84 2b       	or	r24, r20
    1404:	8c 93       	st	X, r24
    1406:	41 c0       	rjmp	.+130    	; 0x148a <DIO_u8InitPinPullUp+0x104>
		case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8Pin); break;
    1408:	a8 e3       	ldi	r26, 0x38	; 56
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e8 e3       	ldi	r30, 0x38	; 56
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	48 2f       	mov	r20, r24
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	02 2e       	mov	r0, r18
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <DIO_u8InitPinPullUp+0xa0>
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	0a 94       	dec	r0
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <DIO_u8InitPinPullUp+0x9c>
    142a:	84 2b       	or	r24, r20
    142c:	8c 93       	st	X, r24
    142e:	2d c0       	rjmp	.+90     	; 0x148a <DIO_u8InitPinPullUp+0x104>
		case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8Pin); break;
    1430:	a5 e3       	ldi	r26, 0x35	; 53
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	e5 e3       	ldi	r30, 0x35	; 53
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	48 2f       	mov	r20, r24
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	02 2e       	mov	r0, r18
    1448:	02 c0       	rjmp	.+4      	; 0x144e <DIO_u8InitPinPullUp+0xc8>
    144a:	88 0f       	add	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	0a 94       	dec	r0
    1450:	e2 f7       	brpl	.-8      	; 0x144a <DIO_u8InitPinPullUp+0xc4>
    1452:	84 2b       	or	r24, r20
    1454:	8c 93       	st	X, r24
    1456:	19 c0       	rjmp	.+50     	; 0x148a <DIO_u8InitPinPullUp+0x104>
		case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8Pin); break;
    1458:	a2 e3       	ldi	r26, 0x32	; 50
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e2 e3       	ldi	r30, 0x32	; 50
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	48 2f       	mov	r20, r24
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	02 2e       	mov	r0, r18
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <DIO_u8InitPinPullUp+0xf0>
    1472:	88 0f       	add	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	0a 94       	dec	r0
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <DIO_u8InitPinPullUp+0xec>
    147a:	84 2b       	or	r24, r20
    147c:	8c 93       	st	X, r24
    147e:	05 c0       	rjmp	.+10     	; 0x148a <DIO_u8InitPinPullUp+0x104>
		default : Local_u8ErrorState = 1  ;
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	89 83       	std	Y+1, r24	; 0x01
    1484:	02 c0       	rjmp	.+4      	; 0x148a <DIO_u8InitPinPullUp+0x104>
		}
	}
	else
	{
		Local_u8ErrorState = 1 ;
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    148a:	89 81       	ldd	r24, Y+1	; 0x01
}
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	cf 91       	pop	r28
    1498:	df 91       	pop	r29
    149a:	08 95       	ret

0000149c <SSD_u8SetNumbers>:

#include <util/delay.h>


u8 SSD_u8SetNumbers (s8 Copy_u8Number ,SSD_init *SSD)
{
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	00 d0       	rcall	.+0      	; 0x14a2 <SSD_u8SetNumbers+0x6>
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <SSD_u8SetNumbers+0x8>
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
    14a8:	8a 83       	std	Y+2, r24	; 0x02
    14aa:	7c 83       	std	Y+4, r23	; 0x04
    14ac:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0;
    14ae:	19 82       	std	Y+1, r1	; 0x01

	if(SSD->COM_TYPE == CATHOD)
    14b0:	eb 81       	ldd	r30, Y+3	; 0x03
    14b2:	fc 81       	ldd	r31, Y+4	; 0x04
    14b4:	80 81       	ld	r24, Z
    14b6:	88 23       	and	r24, r24
    14b8:	51 f5       	brne	.+84     	; 0x150e <SSD_u8SetNumbers+0x72>
	{
		if(SSD->ENABLE_STATE == SSD_ENABLE)
    14ba:	eb 81       	ldd	r30, Y+3	; 0x03
    14bc:	fc 81       	ldd	r31, Y+4	; 0x04
    14be:	84 81       	ldd	r24, Z+4	; 0x04
    14c0:	81 30       	cpi	r24, 0x01	; 1
    14c2:	91 f4       	brne	.+36     	; 0x14e8 <SSD_u8SetNumbers+0x4c>
		{
			DIO_u8SetPinValue(SSD->ENABLE_PORT,SSD->ENABLE_PIN,DIO_u8PIN_LOW);
    14c4:	eb 81       	ldd	r30, Y+3	; 0x03
    14c6:	fc 81       	ldd	r31, Y+4	; 0x04
    14c8:	82 81       	ldd	r24, Z+2	; 0x02
    14ca:	eb 81       	ldd	r30, Y+3	; 0x03
    14cc:	fc 81       	ldd	r31, Y+4	; 0x04
    14ce:	93 81       	ldd	r25, Z+3	; 0x03
    14d0:	69 2f       	mov	r22, r25
    14d2:	40 e0       	ldi	r20, 0x00	; 0
    14d4:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
			DIO_u8SetPortValue(SSD->PORT,Copy_u8Number);
    14d8:	eb 81       	ldd	r30, Y+3	; 0x03
    14da:	fc 81       	ldd	r31, Y+4	; 0x04
    14dc:	81 81       	ldd	r24, Z+1	; 0x01
    14de:	9a 81       	ldd	r25, Y+2	; 0x02
    14e0:	69 2f       	mov	r22, r25
    14e2:	0e 94 07 08 	call	0x100e	; 0x100e <DIO_u8SetPortValue>
    14e6:	47 c0       	rjmp	.+142    	; 0x1576 <SSD_u8SetNumbers+0xda>
		}
		else if(SSD->ENABLE_STATE == SSD_DISABLE)
    14e8:	eb 81       	ldd	r30, Y+3	; 0x03
    14ea:	fc 81       	ldd	r31, Y+4	; 0x04
    14ec:	84 81       	ldd	r24, Z+4	; 0x04
    14ee:	88 23       	and	r24, r24
    14f0:	59 f4       	brne	.+22     	; 0x1508 <SSD_u8SetNumbers+0x6c>
		{
			DIO_u8SetPinValue(SSD->ENABLE_PORT,SSD->ENABLE_PIN,DIO_u8PIN_HIGH);
    14f2:	eb 81       	ldd	r30, Y+3	; 0x03
    14f4:	fc 81       	ldd	r31, Y+4	; 0x04
    14f6:	82 81       	ldd	r24, Z+2	; 0x02
    14f8:	eb 81       	ldd	r30, Y+3	; 0x03
    14fa:	fc 81       	ldd	r31, Y+4	; 0x04
    14fc:	93 81       	ldd	r25, Z+3	; 0x03
    14fe:	69 2f       	mov	r22, r25
    1500:	41 e0       	ldi	r20, 0x01	; 1
    1502:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    1506:	37 c0       	rjmp	.+110    	; 0x1576 <SSD_u8SetNumbers+0xda>
		}
		else
		{
			Local_u8ErrorState = 1;
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	89 83       	std	Y+1, r24	; 0x01
    150c:	34 c0       	rjmp	.+104    	; 0x1576 <SSD_u8SetNumbers+0xda>
		}
	}

	else if (SSD->COM_TYPE == ANODE)
    150e:	eb 81       	ldd	r30, Y+3	; 0x03
    1510:	fc 81       	ldd	r31, Y+4	; 0x04
    1512:	80 81       	ld	r24, Z
    1514:	81 30       	cpi	r24, 0x01	; 1
    1516:	69 f5       	brne	.+90     	; 0x1572 <SSD_u8SetNumbers+0xd6>
	{
		if(SSD->ENABLE_STATE == SSD_ENABLE)
    1518:	eb 81       	ldd	r30, Y+3	; 0x03
    151a:	fc 81       	ldd	r31, Y+4	; 0x04
    151c:	84 81       	ldd	r24, Z+4	; 0x04
    151e:	81 30       	cpi	r24, 0x01	; 1
    1520:	a9 f4       	brne	.+42     	; 0x154c <SSD_u8SetNumbers+0xb0>
		{
			DIO_u8SetPinValue(SSD->ENABLE_PORT,SSD->ENABLE_PIN,DIO_u8PIN_HIGH);
    1522:	eb 81       	ldd	r30, Y+3	; 0x03
    1524:	fc 81       	ldd	r31, Y+4	; 0x04
    1526:	82 81       	ldd	r24, Z+2	; 0x02
    1528:	eb 81       	ldd	r30, Y+3	; 0x03
    152a:	fc 81       	ldd	r31, Y+4	; 0x04
    152c:	93 81       	ldd	r25, Z+3	; 0x03
    152e:	69 2f       	mov	r22, r25
    1530:	41 e0       	ldi	r20, 0x01	; 1
    1532:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
			DIO_u8SetPortValue(SSD->PORT,(~Copy_u8Number));
    1536:	eb 81       	ldd	r30, Y+3	; 0x03
    1538:	fc 81       	ldd	r31, Y+4	; 0x04
    153a:	21 81       	ldd	r18, Z+1	; 0x01
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	98 2f       	mov	r25, r24
    1540:	90 95       	com	r25
    1542:	82 2f       	mov	r24, r18
    1544:	69 2f       	mov	r22, r25
    1546:	0e 94 07 08 	call	0x100e	; 0x100e <DIO_u8SetPortValue>
    154a:	15 c0       	rjmp	.+42     	; 0x1576 <SSD_u8SetNumbers+0xda>
		}
		else if(SSD->ENABLE_STATE == SSD_DISABLE)
    154c:	eb 81       	ldd	r30, Y+3	; 0x03
    154e:	fc 81       	ldd	r31, Y+4	; 0x04
    1550:	84 81       	ldd	r24, Z+4	; 0x04
    1552:	88 23       	and	r24, r24
    1554:	59 f4       	brne	.+22     	; 0x156c <SSD_u8SetNumbers+0xd0>
		{
			DIO_u8SetPinValue(SSD->ENABLE_PORT,SSD->ENABLE_PIN,DIO_u8PIN_LOW);
    1556:	eb 81       	ldd	r30, Y+3	; 0x03
    1558:	fc 81       	ldd	r31, Y+4	; 0x04
    155a:	82 81       	ldd	r24, Z+2	; 0x02
    155c:	eb 81       	ldd	r30, Y+3	; 0x03
    155e:	fc 81       	ldd	r31, Y+4	; 0x04
    1560:	93 81       	ldd	r25, Z+3	; 0x03
    1562:	69 2f       	mov	r22, r25
    1564:	40 e0       	ldi	r20, 0x00	; 0
    1566:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    156a:	05 c0       	rjmp	.+10     	; 0x1576 <SSD_u8SetNumbers+0xda>
		}
		else
		{
			Local_u8ErrorState = 1;
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	89 83       	std	Y+1, r24	; 0x01
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <SSD_u8SetNumbers+0xda>
		}
	}
	else
	{
		Local_u8ErrorState = 1;
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	89 83       	std	Y+1, r24	; 0x01
	}


	return  Local_u8ErrorState;
    1576:	89 81       	ldd	r24, Y+1	; 0x01
}
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	08 95       	ret

00001586 <SSD_u8RangNumbers>:


u8 SSD_u8RangNumbers (u8 Copy_u8StartNumber, u8 Copy_u8EndNumber,SSD_init *SSD)
{
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
    158e:	a3 97       	sbiw	r28, 0x23	; 35
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	f8 94       	cli
    1594:	de bf       	out	0x3e, r29	; 62
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	cd bf       	out	0x3d, r28	; 61
    159a:	8b 8f       	std	Y+27, r24	; 0x1b
    159c:	6c 8f       	std	Y+28, r22	; 0x1c
    159e:	5e 8f       	std	Y+30, r21	; 0x1e
    15a0:	4d 8f       	std	Y+29, r20	; 0x1d
	u8 Local_u8ErrorState = 0;
    15a2:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_u8SSD_Counter = 0;
    15a4:	1f 86       	std	Y+15, r1	; 0x0f
	u8 Local_u8SSD_Array[10] = {SSD_ZERO,SSD_ONE,SSD_TWO,SSD_THREE,SSD_FOUR,SSD_FIVE,SSD_SIX,SSD_SEVEN,SSD_EIGHT,SSD_NINE};
    15a6:	ce 01       	movw	r24, r28
    15a8:	41 96       	adiw	r24, 0x11	; 17
    15aa:	98 a3       	std	Y+32, r25	; 0x20
    15ac:	8f 8f       	std	Y+31, r24	; 0x1f
    15ae:	eb e7       	ldi	r30, 0x7B	; 123
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	fa a3       	std	Y+34, r31	; 0x22
    15b4:	e9 a3       	std	Y+33, r30	; 0x21
    15b6:	fa e0       	ldi	r31, 0x0A	; 10
    15b8:	fb a3       	std	Y+35, r31	; 0x23
    15ba:	e9 a1       	ldd	r30, Y+33	; 0x21
    15bc:	fa a1       	ldd	r31, Y+34	; 0x22
    15be:	00 80       	ld	r0, Z
    15c0:	89 a1       	ldd	r24, Y+33	; 0x21
    15c2:	9a a1       	ldd	r25, Y+34	; 0x22
    15c4:	01 96       	adiw	r24, 0x01	; 1
    15c6:	9a a3       	std	Y+34, r25	; 0x22
    15c8:	89 a3       	std	Y+33, r24	; 0x21
    15ca:	ef 8d       	ldd	r30, Y+31	; 0x1f
    15cc:	f8 a1       	ldd	r31, Y+32	; 0x20
    15ce:	00 82       	st	Z, r0
    15d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15d2:	98 a1       	ldd	r25, Y+32	; 0x20
    15d4:	01 96       	adiw	r24, 0x01	; 1
    15d6:	98 a3       	std	Y+32, r25	; 0x20
    15d8:	8f 8f       	std	Y+31, r24	; 0x1f
    15da:	9b a1       	ldd	r25, Y+35	; 0x23
    15dc:	91 50       	subi	r25, 0x01	; 1
    15de:	9b a3       	std	Y+35, r25	; 0x23
    15e0:	eb a1       	ldd	r30, Y+35	; 0x23
    15e2:	ee 23       	and	r30, r30
    15e4:	51 f7       	brne	.-44     	; 0x15ba <SSD_u8RangNumbers+0x34>
	if (Copy_u8EndNumber <=9)
    15e6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    15e8:	8a 30       	cpi	r24, 0x0A	; 10
    15ea:	08 f0       	brcs	.+2      	; 0x15ee <SSD_u8RangNumbers+0x68>
    15ec:	8c c0       	rjmp	.+280    	; 0x1706 <SSD_u8RangNumbers+0x180>
	{
		for(Local_u8SSD_Counter = Copy_u8StartNumber; Local_u8SSD_Counter<=Copy_u8EndNumber;Local_u8SSD_Counter++)
    15ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15f0:	8f 87       	std	Y+15, r24	; 0x0f
    15f2:	83 c0       	rjmp	.+262    	; 0x16fa <SSD_u8RangNumbers+0x174>
		{
			SSD_u8SetNumbers(Local_u8SSD_Array[Local_u8SSD_Counter],SSD);
    15f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    15f6:	28 2f       	mov	r18, r24
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	ce 01       	movw	r24, r28
    15fc:	41 96       	adiw	r24, 0x11	; 17
    15fe:	fc 01       	movw	r30, r24
    1600:	e2 0f       	add	r30, r18
    1602:	f3 1f       	adc	r31, r19
    1604:	80 81       	ld	r24, Z
    1606:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1608:	3e 8d       	ldd	r19, Y+30	; 0x1e
    160a:	b9 01       	movw	r22, r18
    160c:	0e 94 4e 0a 	call	0x149c	; 0x149c <SSD_u8SetNumbers>
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	aa e7       	ldi	r26, 0x7A	; 122
    1616:	b4 e4       	ldi	r27, 0x44	; 68
    1618:	8b 87       	std	Y+11, r24	; 0x0b
    161a:	9c 87       	std	Y+12, r25	; 0x0c
    161c:	ad 87       	std	Y+13, r26	; 0x0d
    161e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1620:	6b 85       	ldd	r22, Y+11	; 0x0b
    1622:	7c 85       	ldd	r23, Y+12	; 0x0c
    1624:	8d 85       	ldd	r24, Y+13	; 0x0d
    1626:	9e 85       	ldd	r25, Y+14	; 0x0e
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	4a ef       	ldi	r20, 0xFA	; 250
    162e:	54 e4       	ldi	r21, 0x44	; 68
    1630:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	8f 83       	std	Y+7, r24	; 0x07
    163a:	98 87       	std	Y+8, r25	; 0x08
    163c:	a9 87       	std	Y+9, r26	; 0x09
    163e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1640:	6f 81       	ldd	r22, Y+7	; 0x07
    1642:	78 85       	ldd	r23, Y+8	; 0x08
    1644:	89 85       	ldd	r24, Y+9	; 0x09
    1646:	9a 85       	ldd	r25, Y+10	; 0x0a
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	40 e8       	ldi	r20, 0x80	; 128
    164e:	5f e3       	ldi	r21, 0x3F	; 63
    1650:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1654:	88 23       	and	r24, r24
    1656:	2c f4       	brge	.+10     	; 0x1662 <SSD_u8RangNumbers+0xdc>
		__ticks = 1;
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	9e 83       	std	Y+6, r25	; 0x06
    165e:	8d 83       	std	Y+5, r24	; 0x05
    1660:	3f c0       	rjmp	.+126    	; 0x16e0 <SSD_u8RangNumbers+0x15a>
	else if (__tmp > 65535)
    1662:	6f 81       	ldd	r22, Y+7	; 0x07
    1664:	78 85       	ldd	r23, Y+8	; 0x08
    1666:	89 85       	ldd	r24, Y+9	; 0x09
    1668:	9a 85       	ldd	r25, Y+10	; 0x0a
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	3f ef       	ldi	r19, 0xFF	; 255
    166e:	4f e7       	ldi	r20, 0x7F	; 127
    1670:	57 e4       	ldi	r21, 0x47	; 71
    1672:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1676:	18 16       	cp	r1, r24
    1678:	4c f5       	brge	.+82     	; 0x16cc <SSD_u8RangNumbers+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    167a:	6b 85       	ldd	r22, Y+11	; 0x0b
    167c:	7c 85       	ldd	r23, Y+12	; 0x0c
    167e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1680:	9e 85       	ldd	r25, Y+14	; 0x0e
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	40 e2       	ldi	r20, 0x20	; 32
    1688:	51 e4       	ldi	r21, 0x41	; 65
    168a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	bc 01       	movw	r22, r24
    1694:	cd 01       	movw	r24, r26
    1696:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	9e 83       	std	Y+6, r25	; 0x06
    16a0:	8d 83       	std	Y+5, r24	; 0x05
    16a2:	0f c0       	rjmp	.+30     	; 0x16c2 <SSD_u8RangNumbers+0x13c>
    16a4:	88 ec       	ldi	r24, 0xC8	; 200
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	9c 83       	std	Y+4, r25	; 0x04
    16aa:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16ac:	8b 81       	ldd	r24, Y+3	; 0x03
    16ae:	9c 81       	ldd	r25, Y+4	; 0x04
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	f1 f7       	brne	.-4      	; 0x16b0 <SSD_u8RangNumbers+0x12a>
    16b4:	9c 83       	std	Y+4, r25	; 0x04
    16b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ba:	9e 81       	ldd	r25, Y+6	; 0x06
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	9e 83       	std	Y+6, r25	; 0x06
    16c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c2:	8d 81       	ldd	r24, Y+5	; 0x05
    16c4:	9e 81       	ldd	r25, Y+6	; 0x06
    16c6:	00 97       	sbiw	r24, 0x00	; 0
    16c8:	69 f7       	brne	.-38     	; 0x16a4 <SSD_u8RangNumbers+0x11e>
    16ca:	14 c0       	rjmp	.+40     	; 0x16f4 <SSD_u8RangNumbers+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16cc:	6f 81       	ldd	r22, Y+7	; 0x07
    16ce:	78 85       	ldd	r23, Y+8	; 0x08
    16d0:	89 85       	ldd	r24, Y+9	; 0x09
    16d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	9e 83       	std	Y+6, r25	; 0x06
    16de:	8d 83       	std	Y+5, r24	; 0x05
    16e0:	8d 81       	ldd	r24, Y+5	; 0x05
    16e2:	9e 81       	ldd	r25, Y+6	; 0x06
    16e4:	9a 83       	std	Y+2, r25	; 0x02
    16e6:	89 83       	std	Y+1, r24	; 0x01
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	9a 81       	ldd	r25, Y+2	; 0x02
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	f1 f7       	brne	.-4      	; 0x16ec <SSD_u8RangNumbers+0x166>
    16f0:	9a 83       	std	Y+2, r25	; 0x02
    16f2:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_u8ErrorState = 0;
	u8 Local_u8SSD_Counter = 0;
	u8 Local_u8SSD_Array[10] = {SSD_ZERO,SSD_ONE,SSD_TWO,SSD_THREE,SSD_FOUR,SSD_FIVE,SSD_SIX,SSD_SEVEN,SSD_EIGHT,SSD_NINE};
	if (Copy_u8EndNumber <=9)
	{
		for(Local_u8SSD_Counter = Copy_u8StartNumber; Local_u8SSD_Counter<=Copy_u8EndNumber;Local_u8SSD_Counter++)
    16f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    16f6:	8f 5f       	subi	r24, 0xFF	; 255
    16f8:	8f 87       	std	Y+15, r24	; 0x0f
    16fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    16fc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16fe:	89 17       	cp	r24, r25
    1700:	08 f0       	brcs	.+2      	; 0x1704 <SSD_u8RangNumbers+0x17e>
    1702:	78 cf       	rjmp	.-272    	; 0x15f4 <SSD_u8RangNumbers+0x6e>
    1704:	02 c0       	rjmp	.+4      	; 0x170a <SSD_u8RangNumbers+0x184>
			_delay_ms(1000);
		}
	}
	else
	{
		Local_u8ErrorState = 1;
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	88 8b       	std	Y+16, r24	; 0x10
	}


	return  Local_u8ErrorState;
    170a:	88 89       	ldd	r24, Y+16	; 0x10
}
    170c:	a3 96       	adiw	r28, 0x23	; 35
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	f8 94       	cli
    1712:	de bf       	out	0x3e, r29	; 62
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	cd bf       	out	0x3d, r28	; 61
    1718:	cf 91       	pop	r28
    171a:	df 91       	pop	r29
    171c:	08 95       	ret

0000171e <SSD_u8intNumbers>:

void SSD_u8intNumbers (u8 Copy_u8Number, SSD_init *SSD)
{
    171e:	df 93       	push	r29
    1720:	cf 93       	push	r28
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
    1726:	62 97       	sbiw	r28, 0x12	; 18
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	f8 94       	cli
    172c:	de bf       	out	0x3e, r29	; 62
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	cd bf       	out	0x3d, r28	; 61
    1732:	8b 87       	std	Y+11, r24	; 0x0b
    1734:	7d 87       	std	Y+13, r23	; 0x0d
    1736:	6c 87       	std	Y+12, r22	; 0x0c
	u8 Local_u8SSD_Array[10] = {SSD_ZERO,SSD_ONE,SSD_TWO,SSD_THREE,SSD_FOUR,SSD_FIVE,SSD_SIX,SSD_SEVEN,SSD_EIGHT,SSD_NINE};
    1738:	ce 01       	movw	r24, r28
    173a:	01 96       	adiw	r24, 0x01	; 1
    173c:	9f 87       	std	Y+15, r25	; 0x0f
    173e:	8e 87       	std	Y+14, r24	; 0x0e
    1740:	e5 e8       	ldi	r30, 0x85	; 133
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	f9 8b       	std	Y+17, r31	; 0x11
    1746:	e8 8b       	std	Y+16, r30	; 0x10
    1748:	fa e0       	ldi	r31, 0x0A	; 10
    174a:	fa 8b       	std	Y+18, r31	; 0x12
    174c:	e8 89       	ldd	r30, Y+16	; 0x10
    174e:	f9 89       	ldd	r31, Y+17	; 0x11
    1750:	00 80       	ld	r0, Z
    1752:	88 89       	ldd	r24, Y+16	; 0x10
    1754:	99 89       	ldd	r25, Y+17	; 0x11
    1756:	01 96       	adiw	r24, 0x01	; 1
    1758:	99 8b       	std	Y+17, r25	; 0x11
    175a:	88 8b       	std	Y+16, r24	; 0x10
    175c:	ee 85       	ldd	r30, Y+14	; 0x0e
    175e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1760:	00 82       	st	Z, r0
    1762:	8e 85       	ldd	r24, Y+14	; 0x0e
    1764:	9f 85       	ldd	r25, Y+15	; 0x0f
    1766:	01 96       	adiw	r24, 0x01	; 1
    1768:	9f 87       	std	Y+15, r25	; 0x0f
    176a:	8e 87       	std	Y+14, r24	; 0x0e
    176c:	9a 89       	ldd	r25, Y+18	; 0x12
    176e:	91 50       	subi	r25, 0x01	; 1
    1770:	9a 8b       	std	Y+18, r25	; 0x12
    1772:	ea 89       	ldd	r30, Y+18	; 0x12
    1774:	ee 23       	and	r30, r30
    1776:	51 f7       	brne	.-44     	; 0x174c <SSD_u8intNumbers+0x2e>

	SSD_u8SetNumbers(Local_u8SSD_Array[Copy_u8Number],SSD);
    1778:	8b 85       	ldd	r24, Y+11	; 0x0b
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	ce 01       	movw	r24, r28
    1780:	01 96       	adiw	r24, 0x01	; 1
    1782:	fc 01       	movw	r30, r24
    1784:	e2 0f       	add	r30, r18
    1786:	f3 1f       	adc	r31, r19
    1788:	80 81       	ld	r24, Z
    178a:	2c 85       	ldd	r18, Y+12	; 0x0c
    178c:	3d 85       	ldd	r19, Y+13	; 0x0d
    178e:	b9 01       	movw	r22, r18
    1790:	0e 94 4e 0a 	call	0x149c	; 0x149c <SSD_u8SetNumbers>

}
    1794:	62 96       	adiw	r28, 0x12	; 18
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	de bf       	out	0x3e, r29	; 62
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	cd bf       	out	0x3d, r28	; 61
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	08 95       	ret

000017a6 <PORT_init>:
#include "../../LIB/BIT_MATH.h"
#include "../../MCAL/DIO/DIO_interface.h"
#include "PORT_interface.h"

void PORT_init (void)
{
    17a6:	df 93       	push	r29
    17a8:	cf 93       	push	r28
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN0,PORTA_PIN0_DIR);
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	41 e0       	ldi	r20, 0x01	; 1
    17b4:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN1,PORTA_PIN1_DIR);
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	61 e0       	ldi	r22, 0x01	; 1
    17bc:	41 e0       	ldi	r20, 0x01	; 1
    17be:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN2,PORTA_PIN2_DIR);
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	62 e0       	ldi	r22, 0x02	; 2
    17c6:	41 e0       	ldi	r20, 0x01	; 1
    17c8:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN3,PORTA_PIN3_DIR);
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	63 e0       	ldi	r22, 0x03	; 3
    17d0:	41 e0       	ldi	r20, 0x01	; 1
    17d2:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN4,PORTA_PIN4_DIR);
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	64 e0       	ldi	r22, 0x04	; 4
    17da:	41 e0       	ldi	r20, 0x01	; 1
    17dc:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN5,PORTA_PIN5_DIR);
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	65 e0       	ldi	r22, 0x05	; 5
    17e4:	41 e0       	ldi	r20, 0x01	; 1
    17e6:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN6,PORTA_PIN6_DIR);
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	66 e0       	ldi	r22, 0x06	; 6
    17ee:	41 e0       	ldi	r20, 0x01	; 1
    17f0:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN7,PORTA_PIN7_DIR);
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	67 e0       	ldi	r22, 0x07	; 7
    17f8:	41 e0       	ldi	r20, 0x01	; 1
    17fa:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>


	DIO_u8SetPinDirection(DIO_u8PORTB,DIO_u8PIN0,PORTB_PIN0_DIR);
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	60 e0       	ldi	r22, 0x00	; 0
    1802:	40 e0       	ldi	r20, 0x00	; 0
    1804:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB,DIO_u8PIN1,PORTB_PIN1_DIR);
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	61 e0       	ldi	r22, 0x01	; 1
    180c:	40 e0       	ldi	r20, 0x00	; 0
    180e:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB,DIO_u8PIN2,PORTB_PIN2_DIR);
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	62 e0       	ldi	r22, 0x02	; 2
    1816:	40 e0       	ldi	r20, 0x00	; 0
    1818:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB,DIO_u8PIN3,PORTB_PIN3_DIR);
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	63 e0       	ldi	r22, 0x03	; 3
    1820:	40 e0       	ldi	r20, 0x00	; 0
    1822:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB,DIO_u8PIN4,PORTB_PIN4_DIR);
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	64 e0       	ldi	r22, 0x04	; 4
    182a:	40 e0       	ldi	r20, 0x00	; 0
    182c:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB,DIO_u8PIN5,PORTB_PIN5_DIR);
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	65 e0       	ldi	r22, 0x05	; 5
    1834:	40 e0       	ldi	r20, 0x00	; 0
    1836:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB,DIO_u8PIN6,PORTB_PIN6_DIR);
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	66 e0       	ldi	r22, 0x06	; 6
    183e:	40 e0       	ldi	r20, 0x00	; 0
    1840:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB,DIO_u8PIN7,PORTB_PIN7_DIR);
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	67 e0       	ldi	r22, 0x07	; 7
    1848:	40 e0       	ldi	r20, 0x00	; 0
    184a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>


	DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN0,PORTC_PIN0_DIR);
    184e:	82 e0       	ldi	r24, 0x02	; 2
    1850:	60 e0       	ldi	r22, 0x00	; 0
    1852:	41 e0       	ldi	r20, 0x01	; 1
    1854:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN1,PORTC_PIN1_DIR);
    1858:	82 e0       	ldi	r24, 0x02	; 2
    185a:	61 e0       	ldi	r22, 0x01	; 1
    185c:	41 e0       	ldi	r20, 0x01	; 1
    185e:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN2,PORTC_PIN2_DIR);
    1862:	82 e0       	ldi	r24, 0x02	; 2
    1864:	62 e0       	ldi	r22, 0x02	; 2
    1866:	41 e0       	ldi	r20, 0x01	; 1
    1868:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN3,PORTC_PIN3_DIR);
    186c:	82 e0       	ldi	r24, 0x02	; 2
    186e:	63 e0       	ldi	r22, 0x03	; 3
    1870:	41 e0       	ldi	r20, 0x01	; 1
    1872:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN4,PORTC_PIN4_DIR);
    1876:	82 e0       	ldi	r24, 0x02	; 2
    1878:	64 e0       	ldi	r22, 0x04	; 4
    187a:	41 e0       	ldi	r20, 0x01	; 1
    187c:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN5,PORTC_PIN5_DIR);
    1880:	82 e0       	ldi	r24, 0x02	; 2
    1882:	65 e0       	ldi	r22, 0x05	; 5
    1884:	41 e0       	ldi	r20, 0x01	; 1
    1886:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN6,PORTC_PIN6_DIR);
    188a:	82 e0       	ldi	r24, 0x02	; 2
    188c:	66 e0       	ldi	r22, 0x06	; 6
    188e:	41 e0       	ldi	r20, 0x01	; 1
    1890:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN7,PORTC_PIN7_DIR);
    1894:	82 e0       	ldi	r24, 0x02	; 2
    1896:	67 e0       	ldi	r22, 0x07	; 7
    1898:	41 e0       	ldi	r20, 0x01	; 1
    189a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>


	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN0,PORTD_PIN0_DIR);
    189e:	83 e0       	ldi	r24, 0x03	; 3
    18a0:	60 e0       	ldi	r22, 0x00	; 0
    18a2:	41 e0       	ldi	r20, 0x01	; 1
    18a4:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN1,PORTD_PIN1_DIR);
    18a8:	83 e0       	ldi	r24, 0x03	; 3
    18aa:	61 e0       	ldi	r22, 0x01	; 1
    18ac:	41 e0       	ldi	r20, 0x01	; 1
    18ae:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN2,PORTD_PIN2_DIR);
    18b2:	83 e0       	ldi	r24, 0x03	; 3
    18b4:	62 e0       	ldi	r22, 0x02	; 2
    18b6:	41 e0       	ldi	r20, 0x01	; 1
    18b8:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN3,PORTD_PIN3_DIR);
    18bc:	83 e0       	ldi	r24, 0x03	; 3
    18be:	63 e0       	ldi	r22, 0x03	; 3
    18c0:	40 e0       	ldi	r20, 0x00	; 0
    18c2:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN4,PORTD_PIN4_DIR);
    18c6:	83 e0       	ldi	r24, 0x03	; 3
    18c8:	64 e0       	ldi	r22, 0x04	; 4
    18ca:	40 e0       	ldi	r20, 0x00	; 0
    18cc:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN5,PORTD_PIN5_DIR);
    18d0:	83 e0       	ldi	r24, 0x03	; 3
    18d2:	65 e0       	ldi	r22, 0x05	; 5
    18d4:	40 e0       	ldi	r20, 0x00	; 0
    18d6:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN6,PORTD_PIN6_DIR);
    18da:	83 e0       	ldi	r24, 0x03	; 3
    18dc:	66 e0       	ldi	r22, 0x06	; 6
    18de:	40 e0       	ldi	r20, 0x00	; 0
    18e0:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN7,PORTD_PIN7_DIR);
    18e4:	83 e0       	ldi	r24, 0x03	; 3
    18e6:	67 e0       	ldi	r22, 0x07	; 7
    18e8:	40 e0       	ldi	r20, 0x00	; 0
    18ea:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_u8SetPinDirection>

/************************************ INTI VALUE***********************************************/
    DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN0,PORTA_PIN0_INITIAL_VALUE);
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	60 e0       	ldi	r22, 0x00	; 0
    18f2:	40 e0       	ldi	r20, 0x00	; 0
    18f4:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN1,PORTA_PIN0_INITIAL_VALUE);
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	61 e0       	ldi	r22, 0x01	; 1
    18fc:	40 e0       	ldi	r20, 0x00	; 0
    18fe:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN2,PORTA_PIN0_INITIAL_VALUE);
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	62 e0       	ldi	r22, 0x02	; 2
    1906:	40 e0       	ldi	r20, 0x00	; 0
    1908:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN3,PORTA_PIN3_INITIAL_VALUE);
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	63 e0       	ldi	r22, 0x03	; 3
    1910:	40 e0       	ldi	r20, 0x00	; 0
    1912:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN4,PORTA_PIN4_INITIAL_VALUE);
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	64 e0       	ldi	r22, 0x04	; 4
    191a:	40 e0       	ldi	r20, 0x00	; 0
    191c:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN5,PORTA_PIN5_INITIAL_VALUE);
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	65 e0       	ldi	r22, 0x05	; 5
    1924:	40 e0       	ldi	r20, 0x00	; 0
    1926:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN6,PORTA_PIN6_INITIAL_VALUE);
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	66 e0       	ldi	r22, 0x06	; 6
    192e:	40 e0       	ldi	r20, 0x00	; 0
    1930:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN7,PORTA_PIN7_INITIAL_VALUE);
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	67 e0       	ldi	r22, 0x07	; 7
    1938:	40 e0       	ldi	r20, 0x00	; 0
    193a:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>


    DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN0,PORTB_PIN0_INITIAL_VALUE);
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	60 e0       	ldi	r22, 0x00	; 0
    1942:	40 e0       	ldi	r20, 0x00	; 0
    1944:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN1,PORTB_PIN0_INITIAL_VALUE);
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	61 e0       	ldi	r22, 0x01	; 1
    194c:	40 e0       	ldi	r20, 0x00	; 0
    194e:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN2,PORTB_PIN0_INITIAL_VALUE);
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	62 e0       	ldi	r22, 0x02	; 2
    1956:	40 e0       	ldi	r20, 0x00	; 0
    1958:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN3,PORTB_PIN3_INITIAL_VALUE);
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	63 e0       	ldi	r22, 0x03	; 3
    1960:	40 e0       	ldi	r20, 0x00	; 0
    1962:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN4,PORTB_PIN4_INITIAL_VALUE);
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	64 e0       	ldi	r22, 0x04	; 4
    196a:	40 e0       	ldi	r20, 0x00	; 0
    196c:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN5,PORTB_PIN5_INITIAL_VALUE);
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	65 e0       	ldi	r22, 0x05	; 5
    1974:	40 e0       	ldi	r20, 0x00	; 0
    1976:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN6,PORTB_PIN6_INITIAL_VALUE);
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	66 e0       	ldi	r22, 0x06	; 6
    197e:	40 e0       	ldi	r20, 0x00	; 0
    1980:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN7,PORTB_PIN7_INITIAL_VALUE);
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	67 e0       	ldi	r22, 0x07	; 7
    1988:	40 e0       	ldi	r20, 0x00	; 0
    198a:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>


    DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN0,PORTC_PIN0_INITIAL_VALUE);
    198e:	82 e0       	ldi	r24, 0x02	; 2
    1990:	60 e0       	ldi	r22, 0x00	; 0
    1992:	40 e0       	ldi	r20, 0x00	; 0
    1994:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN1,PORTC_PIN0_INITIAL_VALUE);
    1998:	82 e0       	ldi	r24, 0x02	; 2
    199a:	61 e0       	ldi	r22, 0x01	; 1
    199c:	40 e0       	ldi	r20, 0x00	; 0
    199e:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN2,PORTC_PIN0_INITIAL_VALUE);
    19a2:	82 e0       	ldi	r24, 0x02	; 2
    19a4:	62 e0       	ldi	r22, 0x02	; 2
    19a6:	40 e0       	ldi	r20, 0x00	; 0
    19a8:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN3,PORTC_PIN3_INITIAL_VALUE);
    19ac:	82 e0       	ldi	r24, 0x02	; 2
    19ae:	63 e0       	ldi	r22, 0x03	; 3
    19b0:	40 e0       	ldi	r20, 0x00	; 0
    19b2:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN4,PORTC_PIN4_INITIAL_VALUE);
    19b6:	82 e0       	ldi	r24, 0x02	; 2
    19b8:	64 e0       	ldi	r22, 0x04	; 4
    19ba:	40 e0       	ldi	r20, 0x00	; 0
    19bc:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN5,PORTC_PIN5_INITIAL_VALUE);
    19c0:	82 e0       	ldi	r24, 0x02	; 2
    19c2:	65 e0       	ldi	r22, 0x05	; 5
    19c4:	40 e0       	ldi	r20, 0x00	; 0
    19c6:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN6,PORTC_PIN6_INITIAL_VALUE);
    19ca:	82 e0       	ldi	r24, 0x02	; 2
    19cc:	66 e0       	ldi	r22, 0x06	; 6
    19ce:	40 e0       	ldi	r20, 0x00	; 0
    19d0:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN7,PORTC_PIN7_INITIAL_VALUE);
    19d4:	82 e0       	ldi	r24, 0x02	; 2
    19d6:	67 e0       	ldi	r22, 0x07	; 7
    19d8:	40 e0       	ldi	r20, 0x00	; 0
    19da:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>


    DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN0,PORTD_PIN0_INITIAL_VALUE);
    19de:	83 e0       	ldi	r24, 0x03	; 3
    19e0:	60 e0       	ldi	r22, 0x00	; 0
    19e2:	40 e0       	ldi	r20, 0x00	; 0
    19e4:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN1,PORTD_PIN0_INITIAL_VALUE);
    19e8:	83 e0       	ldi	r24, 0x03	; 3
    19ea:	61 e0       	ldi	r22, 0x01	; 1
    19ec:	40 e0       	ldi	r20, 0x00	; 0
    19ee:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN2,PORTD_PIN0_INITIAL_VALUE);
    19f2:	83 e0       	ldi	r24, 0x03	; 3
    19f4:	62 e0       	ldi	r22, 0x02	; 2
    19f6:	40 e0       	ldi	r20, 0x00	; 0
    19f8:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN3,PORTD_PIN3_INITIAL_VALUE);
    19fc:	83 e0       	ldi	r24, 0x03	; 3
    19fe:	63 e0       	ldi	r22, 0x03	; 3
    1a00:	40 e0       	ldi	r20, 0x00	; 0
    1a02:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN4,PORTD_PIN4_INITIAL_VALUE);
    1a06:	83 e0       	ldi	r24, 0x03	; 3
    1a08:	64 e0       	ldi	r22, 0x04	; 4
    1a0a:	40 e0       	ldi	r20, 0x00	; 0
    1a0c:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN5,PORTD_PIN5_INITIAL_VALUE);
    1a10:	83 e0       	ldi	r24, 0x03	; 3
    1a12:	65 e0       	ldi	r22, 0x05	; 5
    1a14:	40 e0       	ldi	r20, 0x00	; 0
    1a16:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN6,PORTD_PIN6_INITIAL_VALUE);
    1a1a:	83 e0       	ldi	r24, 0x03	; 3
    1a1c:	66 e0       	ldi	r22, 0x06	; 6
    1a1e:	40 e0       	ldi	r20, 0x00	; 0
    1a20:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN7,PORTD_PIN7_INITIAL_VALUE);
    1a24:	83 e0       	ldi	r24, 0x03	; 3
    1a26:	67 e0       	ldi	r22, 0x07	; 7
    1a28:	40 e0       	ldi	r20, 0x00	; 0
    1a2a:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>



}
    1a2e:	cf 91       	pop	r28
    1a30:	df 91       	pop	r29
    1a32:	08 95       	ret

00001a34 <LED_u8TurnOn>:




u8 LED_u8TurnOn (LED_init *LED_Color)
{
    1a34:	df 93       	push	r29
    1a36:	cf 93       	push	r28
    1a38:	00 d0       	rcall	.+0      	; 0x1a3a <LED_u8TurnOn+0x6>
    1a3a:	0f 92       	push	r0
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
    1a40:	9b 83       	std	Y+3, r25	; 0x03
    1a42:	8a 83       	std	Y+2, r24	; 0x02
	/*make error state be 1 if the user entered the wrong input to the function*/
	u8 Local_u8ErrorState = 0;
    1a44:	19 82       	std	Y+1, r1	; 0x01
	if(LED_Color->CONNECTING_TYPE ==  LED_SOURCE_CONNECTION)
    1a46:	ea 81       	ldd	r30, Y+2	; 0x02
    1a48:	fb 81       	ldd	r31, Y+3	; 0x03
    1a4a:	82 81       	ldd	r24, Z+2	; 0x02
    1a4c:	81 30       	cpi	r24, 0x01	; 1
    1a4e:	59 f4       	brne	.+22     	; 0x1a66 <LED_u8TurnOn+0x32>
	{
		DIO_u8SetPinValue(LED_Color->PORT,LED_Color->PIN,DIO_u8PIN_HIGH);
    1a50:	ea 81       	ldd	r30, Y+2	; 0x02
    1a52:	fb 81       	ldd	r31, Y+3	; 0x03
    1a54:	80 81       	ld	r24, Z
    1a56:	ea 81       	ldd	r30, Y+2	; 0x02
    1a58:	fb 81       	ldd	r31, Y+3	; 0x03
    1a5a:	91 81       	ldd	r25, Z+1	; 0x01
    1a5c:	69 2f       	mov	r22, r25
    1a5e:	41 e0       	ldi	r20, 0x01	; 1
    1a60:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    1a64:	12 c0       	rjmp	.+36     	; 0x1a8a <LED_u8TurnOn+0x56>
	}
	else if (LED_Color->CONNECTING_TYPE ==  LED_SINK_CONNECTION)
    1a66:	ea 81       	ldd	r30, Y+2	; 0x02
    1a68:	fb 81       	ldd	r31, Y+3	; 0x03
    1a6a:	82 81       	ldd	r24, Z+2	; 0x02
    1a6c:	88 23       	and	r24, r24
    1a6e:	59 f4       	brne	.+22     	; 0x1a86 <LED_u8TurnOn+0x52>
	{
		DIO_u8SetPinValue(LED_Color->PORT,LED_Color->PIN,DIO_u8PIN_LOW);
    1a70:	ea 81       	ldd	r30, Y+2	; 0x02
    1a72:	fb 81       	ldd	r31, Y+3	; 0x03
    1a74:	80 81       	ld	r24, Z
    1a76:	ea 81       	ldd	r30, Y+2	; 0x02
    1a78:	fb 81       	ldd	r31, Y+3	; 0x03
    1a7a:	91 81       	ldd	r25, Z+1	; 0x01
    1a7c:	69 2f       	mov	r22, r25
    1a7e:	40 e0       	ldi	r20, 0x00	; 0
    1a80:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <LED_u8TurnOn+0x56>
	}
	else
	{
		Local_u8ErrorState =1;
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1a8a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	cf 91       	pop	r28
    1a94:	df 91       	pop	r29
    1a96:	08 95       	ret

00001a98 <LED_u8TurnOff>:

u8 LED_u8TurnOff (LED_init *LED_Color)
{
    1a98:	df 93       	push	r29
    1a9a:	cf 93       	push	r28
    1a9c:	00 d0       	rcall	.+0      	; 0x1a9e <LED_u8TurnOff+0x6>
    1a9e:	0f 92       	push	r0
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
    1aa4:	9b 83       	std	Y+3, r25	; 0x03
    1aa6:	8a 83       	std	Y+2, r24	; 0x02
	/*make error state be 1 if the user entered the wrong input to the function*/
	u8 Local_u8ErrorState = 0;
    1aa8:	19 82       	std	Y+1, r1	; 0x01
	if(LED_Color->CONNECTING_TYPE ==  LED_SOURCE_CONNECTION)
    1aaa:	ea 81       	ldd	r30, Y+2	; 0x02
    1aac:	fb 81       	ldd	r31, Y+3	; 0x03
    1aae:	82 81       	ldd	r24, Z+2	; 0x02
    1ab0:	81 30       	cpi	r24, 0x01	; 1
    1ab2:	59 f4       	brne	.+22     	; 0x1aca <LED_u8TurnOff+0x32>
	{
		DIO_u8SetPinValue(LED_Color->PORT,LED_Color->PIN,DIO_u8PIN_LOW);
    1ab4:	ea 81       	ldd	r30, Y+2	; 0x02
    1ab6:	fb 81       	ldd	r31, Y+3	; 0x03
    1ab8:	80 81       	ld	r24, Z
    1aba:	ea 81       	ldd	r30, Y+2	; 0x02
    1abc:	fb 81       	ldd	r31, Y+3	; 0x03
    1abe:	91 81       	ldd	r25, Z+1	; 0x01
    1ac0:	69 2f       	mov	r22, r25
    1ac2:	40 e0       	ldi	r20, 0x00	; 0
    1ac4:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    1ac8:	12 c0       	rjmp	.+36     	; 0x1aee <LED_u8TurnOff+0x56>
	}
	else if (LED_Color->CONNECTING_TYPE ==  LED_SINK_CONNECTION)
    1aca:	ea 81       	ldd	r30, Y+2	; 0x02
    1acc:	fb 81       	ldd	r31, Y+3	; 0x03
    1ace:	82 81       	ldd	r24, Z+2	; 0x02
    1ad0:	88 23       	and	r24, r24
    1ad2:	59 f4       	brne	.+22     	; 0x1aea <LED_u8TurnOff+0x52>
	{
		DIO_u8SetPinValue(LED_Color->PORT,LED_Color->PIN,DIO_u8PIN_HIGH);
    1ad4:	ea 81       	ldd	r30, Y+2	; 0x02
    1ad6:	fb 81       	ldd	r31, Y+3	; 0x03
    1ad8:	80 81       	ld	r24, Z
    1ada:	ea 81       	ldd	r30, Y+2	; 0x02
    1adc:	fb 81       	ldd	r31, Y+3	; 0x03
    1ade:	91 81       	ldd	r25, Z+1	; 0x01
    1ae0:	69 2f       	mov	r22, r25
    1ae2:	41 e0       	ldi	r20, 0x01	; 1
    1ae4:	0e 94 f5 06 	call	0xdea	; 0xdea <DIO_u8SetPinValue>
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <LED_u8TurnOff+0x56>
	}
	else
	{
		Local_u8ErrorState =1;
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
}
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	0f 90       	pop	r0
    1af6:	cf 91       	pop	r28
    1af8:	df 91       	pop	r29
    1afa:	08 95       	ret

00001afc <TRAFFICLIGHT_voidAPP>:

#include "util/delay.h"


void TRAFFICLIGHT_voidAPP (LED_init LED1, LED_init LED2, LED_init LED3, SSD_init SSD1, SSD_init SSD2)
{
    1afc:	8f 92       	push	r8
    1afe:	9f 92       	push	r9
    1b00:	af 92       	push	r10
    1b02:	bf 92       	push	r11
    1b04:	cf 92       	push	r12
    1b06:	ef 92       	push	r14
    1b08:	ff 92       	push	r15
    1b0a:	0f 93       	push	r16
    1b0c:	1f 93       	push	r17
    1b0e:	df 93       	push	r29
    1b10:	cf 93       	push	r28
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62
    1b16:	c6 55       	subi	r28, 0x56	; 86
    1b18:	d0 40       	sbci	r29, 0x00	; 0
    1b1a:	0f b6       	in	r0, 0x3f	; 63
    1b1c:	f8 94       	cli
    1b1e:	de bf       	out	0x3e, r29	; 62
    1b20:	0f be       	out	0x3f, r0	; 63
    1b22:	cd bf       	out	0x3d, r28	; 61
    1b24:	fe 01       	movw	r30, r28
    1b26:	e7 5b       	subi	r30, 0xB7	; 183
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	60 83       	st	Z, r22
    1b2c:	71 83       	std	Z+1, r23	; 0x01
    1b2e:	82 83       	std	Z+2, r24	; 0x02
    1b30:	fe 01       	movw	r30, r28
    1b32:	e4 5b       	subi	r30, 0xB4	; 180
    1b34:	ff 4f       	sbci	r31, 0xFF	; 255
    1b36:	20 83       	st	Z, r18
    1b38:	31 83       	std	Z+1, r19	; 0x01
    1b3a:	42 83       	std	Z+2, r20	; 0x02
    1b3c:	fe 01       	movw	r30, r28
    1b3e:	e1 5b       	subi	r30, 0xB1	; 177
    1b40:	ff 4f       	sbci	r31, 0xFF	; 255
    1b42:	e0 82       	st	Z, r14
    1b44:	f1 82       	std	Z+1, r15	; 0x01
    1b46:	02 83       	std	Z+2, r16	; 0x02
    1b48:	fe 01       	movw	r30, r28
    1b4a:	ee 5a       	subi	r30, 0xAE	; 174
    1b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4e:	80 82       	st	Z, r8
    1b50:	91 82       	std	Z+1, r9	; 0x01
    1b52:	a2 82       	std	Z+2, r10	; 0x02
    1b54:	b3 82       	std	Z+3, r11	; 0x03
    1b56:	c4 82       	std	Z+4, r12	; 0x04
	s8 i =0,j=3;
    1b58:	fe 01       	movw	r30, r28
    1b5a:	e8 5b       	subi	r30, 0xB8	; 184
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	10 82       	st	Z, r1
    1b60:	fe 01       	movw	r30, r28
    1b62:	e9 5b       	subi	r30, 0xB9	; 185
    1b64:	ff 4f       	sbci	r31, 0xFF	; 255
    1b66:	83 e0       	ldi	r24, 0x03	; 3
    1b68:	80 83       	st	Z, r24
	/*******************start first led*********************/
	i=0;
    1b6a:	fe 01       	movw	r30, r28
    1b6c:	e8 5b       	subi	r30, 0xB8	; 184
    1b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b70:	10 82       	st	Z, r1
	SSD_u8intNumbers(i,&SSD2);
    1b72:	fe 01       	movw	r30, r28
    1b74:	e8 5b       	subi	r30, 0xB8	; 184
    1b76:	ff 4f       	sbci	r31, 0xFF	; 255
    1b78:	80 81       	ld	r24, Z
    1b7a:	be 01       	movw	r22, r28
    1b7c:	6c 59       	subi	r22, 0x9C	; 156
    1b7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b80:	0e 94 8f 0b 	call	0x171e	; 0x171e <SSD_u8intNumbers>
	j=3;
    1b84:	fe 01       	movw	r30, r28
    1b86:	e9 5b       	subi	r30, 0xB9	; 185
    1b88:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8a:	83 e0       	ldi	r24, 0x03	; 3
    1b8c:	80 83       	st	Z, r24
	SSD_u8intNumbers(j,&SSD1);
    1b8e:	fe 01       	movw	r30, r28
    1b90:	e9 5b       	subi	r30, 0xB9	; 185
    1b92:	ff 4f       	sbci	r31, 0xFF	; 255
    1b94:	80 81       	ld	r24, Z
    1b96:	9e 01       	movw	r18, r28
    1b98:	2e 5a       	subi	r18, 0xAE	; 174
    1b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9c:	b9 01       	movw	r22, r18
    1b9e:	0e 94 8f 0b 	call	0x171e	; 0x171e <SSD_u8intNumbers>
	LED_u8TurnOff(&LED3);
    1ba2:	ce 01       	movw	r24, r28
    1ba4:	81 5b       	subi	r24, 0xB1	; 177
    1ba6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba8:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <LED_u8TurnOff>
	LED_u8TurnOn(&LED1);
    1bac:	ce 01       	movw	r24, r28
    1bae:	87 5b       	subi	r24, 0xB7	; 183
    1bb0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb2:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <LED_u8TurnOn>
    1bb6:	fe 01       	movw	r30, r28
    1bb8:	ed 5b       	subi	r30, 0xBD	; 189
    1bba:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	aa e7       	ldi	r26, 0x7A	; 122
    1bc2:	b4 e4       	ldi	r27, 0x44	; 68
    1bc4:	80 83       	st	Z, r24
    1bc6:	91 83       	std	Z+1, r25	; 0x01
    1bc8:	a2 83       	std	Z+2, r26	; 0x02
    1bca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bcc:	8e 01       	movw	r16, r28
    1bce:	01 5c       	subi	r16, 0xC1	; 193
    1bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	ed 5b       	subi	r30, 0xBD	; 189
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	60 81       	ld	r22, Z
    1bda:	71 81       	ldd	r23, Z+1	; 0x01
    1bdc:	82 81       	ldd	r24, Z+2	; 0x02
    1bde:	93 81       	ldd	r25, Z+3	; 0x03
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	4a ef       	ldi	r20, 0xFA	; 250
    1be6:	54 e4       	ldi	r21, 0x44	; 68
    1be8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	f8 01       	movw	r30, r16
    1bf2:	80 83       	st	Z, r24
    1bf4:	91 83       	std	Z+1, r25	; 0x01
    1bf6:	a2 83       	std	Z+2, r26	; 0x02
    1bf8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bfa:	fe 01       	movw	r30, r28
    1bfc:	ff 96       	adiw	r30, 0x3f	; 63
    1bfe:	60 81       	ld	r22, Z
    1c00:	71 81       	ldd	r23, Z+1	; 0x01
    1c02:	82 81       	ldd	r24, Z+2	; 0x02
    1c04:	93 81       	ldd	r25, Z+3	; 0x03
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	40 e8       	ldi	r20, 0x80	; 128
    1c0c:	5f e3       	ldi	r21, 0x3F	; 63
    1c0e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c12:	88 23       	and	r24, r24
    1c14:	2c f4       	brge	.+10     	; 0x1c20 <TRAFFICLIGHT_voidAPP+0x124>
		__ticks = 1;
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	9e af       	std	Y+62, r25	; 0x3e
    1c1c:	8d af       	std	Y+61, r24	; 0x3d
    1c1e:	46 c0       	rjmp	.+140    	; 0x1cac <TRAFFICLIGHT_voidAPP+0x1b0>
	else if (__tmp > 65535)
    1c20:	fe 01       	movw	r30, r28
    1c22:	ff 96       	adiw	r30, 0x3f	; 63
    1c24:	60 81       	ld	r22, Z
    1c26:	71 81       	ldd	r23, Z+1	; 0x01
    1c28:	82 81       	ldd	r24, Z+2	; 0x02
    1c2a:	93 81       	ldd	r25, Z+3	; 0x03
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	3f ef       	ldi	r19, 0xFF	; 255
    1c30:	4f e7       	ldi	r20, 0x7F	; 127
    1c32:	57 e4       	ldi	r21, 0x47	; 71
    1c34:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c38:	18 16       	cp	r1, r24
    1c3a:	64 f5       	brge	.+88     	; 0x1c94 <TRAFFICLIGHT_voidAPP+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c3c:	fe 01       	movw	r30, r28
    1c3e:	ed 5b       	subi	r30, 0xBD	; 189
    1c40:	ff 4f       	sbci	r31, 0xFF	; 255
    1c42:	60 81       	ld	r22, Z
    1c44:	71 81       	ldd	r23, Z+1	; 0x01
    1c46:	82 81       	ldd	r24, Z+2	; 0x02
    1c48:	93 81       	ldd	r25, Z+3	; 0x03
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	40 e2       	ldi	r20, 0x20	; 32
    1c50:	51 e4       	ldi	r21, 0x41	; 65
    1c52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	bc 01       	movw	r22, r24
    1c5c:	cd 01       	movw	r24, r26
    1c5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	9e af       	std	Y+62, r25	; 0x3e
    1c68:	8d af       	std	Y+61, r24	; 0x3d
    1c6a:	0f c0       	rjmp	.+30     	; 0x1c8a <TRAFFICLIGHT_voidAPP+0x18e>
    1c6c:	88 ec       	ldi	r24, 0xC8	; 200
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	9c af       	std	Y+60, r25	; 0x3c
    1c72:	8b af       	std	Y+59, r24	; 0x3b
    1c74:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c76:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	f1 f7       	brne	.-4      	; 0x1c78 <TRAFFICLIGHT_voidAPP+0x17c>
    1c7c:	9c af       	std	Y+60, r25	; 0x3c
    1c7e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c80:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c82:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	9e af       	std	Y+62, r25	; 0x3e
    1c88:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c8c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	69 f7       	brne	.-38     	; 0x1c6c <TRAFFICLIGHT_voidAPP+0x170>
    1c92:	16 c0       	rjmp	.+44     	; 0x1cc0 <TRAFFICLIGHT_voidAPP+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c94:	fe 01       	movw	r30, r28
    1c96:	ff 96       	adiw	r30, 0x3f	; 63
    1c98:	60 81       	ld	r22, Z
    1c9a:	71 81       	ldd	r23, Z+1	; 0x01
    1c9c:	82 81       	ldd	r24, Z+2	; 0x02
    1c9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ca0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	9e af       	std	Y+62, r25	; 0x3e
    1caa:	8d af       	std	Y+61, r24	; 0x3d
    1cac:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cae:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cb0:	9a af       	std	Y+58, r25	; 0x3a
    1cb2:	89 af       	std	Y+57, r24	; 0x39
    1cb4:	89 ad       	ldd	r24, Y+57	; 0x39
    1cb6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	f1 f7       	brne	.-4      	; 0x1cb8 <TRAFFICLIGHT_voidAPP+0x1bc>
    1cbc:	9a af       	std	Y+58, r25	; 0x3a
    1cbe:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1000);

	j=2;
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	e9 5b       	subi	r30, 0xB9	; 185
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	82 e0       	ldi	r24, 0x02	; 2
    1cc8:	80 83       	st	Z, r24
	SSD_u8intNumbers(j,&SSD1);
    1cca:	fe 01       	movw	r30, r28
    1ccc:	e9 5b       	subi	r30, 0xB9	; 185
    1cce:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd0:	80 81       	ld	r24, Z
    1cd2:	9e 01       	movw	r18, r28
    1cd4:	2e 5a       	subi	r18, 0xAE	; 174
    1cd6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd8:	b9 01       	movw	r22, r18
    1cda:	0e 94 8f 0b 	call	0x171e	; 0x171e <SSD_u8intNumbers>
    1cde:	be c0       	rjmp	.+380    	; 0x1e5c <TRAFFICLIGHT_voidAPP+0x360>
	while(j >=0)
	{
		for(i=9 ; i >=0 ; i--)
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	e8 5b       	subi	r30, 0xB8	; 184
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	89 e0       	ldi	r24, 0x09	; 9
    1ce8:	80 83       	st	Z, r24
    1cea:	84 c0       	rjmp	.+264    	; 0x1df4 <TRAFFICLIGHT_voidAPP+0x2f8>
		{
			SSD_u8intNumbers(i,&SSD2);
    1cec:	fe 01       	movw	r30, r28
    1cee:	e8 5b       	subi	r30, 0xB8	; 184
    1cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf2:	80 81       	ld	r24, Z
    1cf4:	be 01       	movw	r22, r28
    1cf6:	6c 59       	subi	r22, 0x9C	; 156
    1cf8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cfa:	0e 94 8f 0b 	call	0x171e	; 0x171e <SSD_u8intNumbers>
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	aa e7       	ldi	r26, 0x7A	; 122
    1d04:	b4 e4       	ldi	r27, 0x44	; 68
    1d06:	8d ab       	std	Y+53, r24	; 0x35
    1d08:	9e ab       	std	Y+54, r25	; 0x36
    1d0a:	af ab       	std	Y+55, r26	; 0x37
    1d0c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d0e:	6d a9       	ldd	r22, Y+53	; 0x35
    1d10:	7e a9       	ldd	r23, Y+54	; 0x36
    1d12:	8f a9       	ldd	r24, Y+55	; 0x37
    1d14:	98 ad       	ldd	r25, Y+56	; 0x38
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	4a ef       	ldi	r20, 0xFA	; 250
    1d1c:	54 e4       	ldi	r21, 0x44	; 68
    1d1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	89 ab       	std	Y+49, r24	; 0x31
    1d28:	9a ab       	std	Y+50, r25	; 0x32
    1d2a:	ab ab       	std	Y+51, r26	; 0x33
    1d2c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d2e:	69 a9       	ldd	r22, Y+49	; 0x31
    1d30:	7a a9       	ldd	r23, Y+50	; 0x32
    1d32:	8b a9       	ldd	r24, Y+51	; 0x33
    1d34:	9c a9       	ldd	r25, Y+52	; 0x34
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e8       	ldi	r20, 0x80	; 128
    1d3c:	5f e3       	ldi	r21, 0x3F	; 63
    1d3e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d42:	88 23       	and	r24, r24
    1d44:	2c f4       	brge	.+10     	; 0x1d50 <TRAFFICLIGHT_voidAPP+0x254>
		__ticks = 1;
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	98 ab       	std	Y+48, r25	; 0x30
    1d4c:	8f a7       	std	Y+47, r24	; 0x2f
    1d4e:	3f c0       	rjmp	.+126    	; 0x1dce <TRAFFICLIGHT_voidAPP+0x2d2>
	else if (__tmp > 65535)
    1d50:	69 a9       	ldd	r22, Y+49	; 0x31
    1d52:	7a a9       	ldd	r23, Y+50	; 0x32
    1d54:	8b a9       	ldd	r24, Y+51	; 0x33
    1d56:	9c a9       	ldd	r25, Y+52	; 0x34
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	3f ef       	ldi	r19, 0xFF	; 255
    1d5c:	4f e7       	ldi	r20, 0x7F	; 127
    1d5e:	57 e4       	ldi	r21, 0x47	; 71
    1d60:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d64:	18 16       	cp	r1, r24
    1d66:	4c f5       	brge	.+82     	; 0x1dba <TRAFFICLIGHT_voidAPP+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d68:	6d a9       	ldd	r22, Y+53	; 0x35
    1d6a:	7e a9       	ldd	r23, Y+54	; 0x36
    1d6c:	8f a9       	ldd	r24, Y+55	; 0x37
    1d6e:	98 ad       	ldd	r25, Y+56	; 0x38
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	40 e2       	ldi	r20, 0x20	; 32
    1d76:	51 e4       	ldi	r21, 0x41	; 65
    1d78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	bc 01       	movw	r22, r24
    1d82:	cd 01       	movw	r24, r26
    1d84:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	98 ab       	std	Y+48, r25	; 0x30
    1d8e:	8f a7       	std	Y+47, r24	; 0x2f
    1d90:	0f c0       	rjmp	.+30     	; 0x1db0 <TRAFFICLIGHT_voidAPP+0x2b4>
    1d92:	88 ec       	ldi	r24, 0xC8	; 200
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	9e a7       	std	Y+46, r25	; 0x2e
    1d98:	8d a7       	std	Y+45, r24	; 0x2d
    1d9a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d9c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <TRAFFICLIGHT_voidAPP+0x2a2>
    1da2:	9e a7       	std	Y+46, r25	; 0x2e
    1da4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1da8:	98 a9       	ldd	r25, Y+48	; 0x30
    1daa:	01 97       	sbiw	r24, 0x01	; 1
    1dac:	98 ab       	std	Y+48, r25	; 0x30
    1dae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1db2:	98 a9       	ldd	r25, Y+48	; 0x30
    1db4:	00 97       	sbiw	r24, 0x00	; 0
    1db6:	69 f7       	brne	.-38     	; 0x1d92 <TRAFFICLIGHT_voidAPP+0x296>
    1db8:	14 c0       	rjmp	.+40     	; 0x1de2 <TRAFFICLIGHT_voidAPP+0x2e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dba:	69 a9       	ldd	r22, Y+49	; 0x31
    1dbc:	7a a9       	ldd	r23, Y+50	; 0x32
    1dbe:	8b a9       	ldd	r24, Y+51	; 0x33
    1dc0:	9c a9       	ldd	r25, Y+52	; 0x34
    1dc2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	98 ab       	std	Y+48, r25	; 0x30
    1dcc:	8f a7       	std	Y+47, r24	; 0x2f
    1dce:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dd0:	98 a9       	ldd	r25, Y+48	; 0x30
    1dd2:	9c a7       	std	Y+44, r25	; 0x2c
    1dd4:	8b a7       	std	Y+43, r24	; 0x2b
    1dd6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1dd8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	f1 f7       	brne	.-4      	; 0x1dda <TRAFFICLIGHT_voidAPP+0x2de>
    1dde:	9c a7       	std	Y+44, r25	; 0x2c
    1de0:	8b a7       	std	Y+43, r24	; 0x2b

	j=2;
	SSD_u8intNumbers(j,&SSD1);
	while(j >=0)
	{
		for(i=9 ; i >=0 ; i--)
    1de2:	de 01       	movw	r26, r28
    1de4:	a8 5b       	subi	r26, 0xB8	; 184
    1de6:	bf 4f       	sbci	r27, 0xFF	; 255
    1de8:	fe 01       	movw	r30, r28
    1dea:	e8 5b       	subi	r30, 0xB8	; 184
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	80 81       	ld	r24, Z
    1df0:	81 50       	subi	r24, 0x01	; 1
    1df2:	8c 93       	st	X, r24
    1df4:	fe 01       	movw	r30, r28
    1df6:	e8 5b       	subi	r30, 0xB8	; 184
    1df8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfa:	80 81       	ld	r24, Z
    1dfc:	88 23       	and	r24, r24
    1dfe:	0c f0       	brlt	.+2      	; 0x1e02 <TRAFFICLIGHT_voidAPP+0x306>
    1e00:	75 cf       	rjmp	.-278    	; 0x1cec <TRAFFICLIGHT_voidAPP+0x1f0>
		{
			SSD_u8intNumbers(i,&SSD2);
			_delay_ms(1000);
		}
		if(i<=0 && j<=0)
    1e02:	fe 01       	movw	r30, r28
    1e04:	e8 5b       	subi	r30, 0xB8	; 184
    1e06:	ff 4f       	sbci	r31, 0xFF	; 255
    1e08:	80 81       	ld	r24, Z
    1e0a:	18 16       	cp	r1, r24
    1e0c:	34 f0       	brlt	.+12     	; 0x1e1a <TRAFFICLIGHT_voidAPP+0x31e>
    1e0e:	fe 01       	movw	r30, r28
    1e10:	e9 5b       	subi	r30, 0xB9	; 185
    1e12:	ff 4f       	sbci	r31, 0xFF	; 255
    1e14:	80 81       	ld	r24, Z
    1e16:	18 16       	cp	r1, r24
    1e18:	44 f5       	brge	.+80     	; 0x1e6a <TRAFFICLIGHT_voidAPP+0x36e>
			break;
		i=9;
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	e8 5b       	subi	r30, 0xB8	; 184
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	89 e0       	ldi	r24, 0x09	; 9
    1e22:	80 83       	st	Z, r24
		SSD_u8intNumbers(i,&SSD2);
    1e24:	fe 01       	movw	r30, r28
    1e26:	e8 5b       	subi	r30, 0xB8	; 184
    1e28:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2a:	80 81       	ld	r24, Z
    1e2c:	be 01       	movw	r22, r28
    1e2e:	6c 59       	subi	r22, 0x9C	; 156
    1e30:	7f 4f       	sbci	r23, 0xFF	; 255
    1e32:	0e 94 8f 0b 	call	0x171e	; 0x171e <SSD_u8intNumbers>
		j--;
    1e36:	de 01       	movw	r26, r28
    1e38:	a9 5b       	subi	r26, 0xB9	; 185
    1e3a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e3c:	fe 01       	movw	r30, r28
    1e3e:	e9 5b       	subi	r30, 0xB9	; 185
    1e40:	ff 4f       	sbci	r31, 0xFF	; 255
    1e42:	80 81       	ld	r24, Z
    1e44:	81 50       	subi	r24, 0x01	; 1
    1e46:	8c 93       	st	X, r24
		SSD_u8intNumbers(j,&SSD1);
    1e48:	fe 01       	movw	r30, r28
    1e4a:	e9 5b       	subi	r30, 0xB9	; 185
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	80 81       	ld	r24, Z
    1e50:	9e 01       	movw	r18, r28
    1e52:	2e 5a       	subi	r18, 0xAE	; 174
    1e54:	3f 4f       	sbci	r19, 0xFF	; 255
    1e56:	b9 01       	movw	r22, r18
    1e58:	0e 94 8f 0b 	call	0x171e	; 0x171e <SSD_u8intNumbers>
	LED_u8TurnOn(&LED1);
	_delay_ms(1000);

	j=2;
	SSD_u8intNumbers(j,&SSD1);
	while(j >=0)
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	e9 5b       	subi	r30, 0xB9	; 185
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	80 81       	ld	r24, Z
    1e64:	88 23       	and	r24, r24
    1e66:	0c f0       	brlt	.+2      	; 0x1e6a <TRAFFICLIGHT_voidAPP+0x36e>
    1e68:	3b cf       	rjmp	.-394    	; 0x1ce0 <TRAFFICLIGHT_voidAPP+0x1e4>
		i=9;
		SSD_u8intNumbers(i,&SSD2);
		j--;
		SSD_u8intNumbers(j,&SSD1);
	}
	i=0;
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	e8 5b       	subi	r30, 0xB8	; 184
    1e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e70:	10 82       	st	Z, r1
	SSD_u8intNumbers(i,&SSD2);
    1e72:	fe 01       	movw	r30, r28
    1e74:	e8 5b       	subi	r30, 0xB8	; 184
    1e76:	ff 4f       	sbci	r31, 0xFF	; 255
    1e78:	80 81       	ld	r24, Z
    1e7a:	be 01       	movw	r22, r28
    1e7c:	6c 59       	subi	r22, 0x9C	; 156
    1e7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e80:	0e 94 8f 0b 	call	0x171e	; 0x171e <SSD_u8intNumbers>
	j=0;
    1e84:	fe 01       	movw	r30, r28
    1e86:	e9 5b       	subi	r30, 0xB9	; 185
    1e88:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8a:	10 82       	st	Z, r1
	SSD_u8intNumbers(j,&SSD1);
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	e9 5b       	subi	r30, 0xB9	; 185
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	80 81       	ld	r24, Z
    1e94:	9e 01       	movw	r18, r28
    1e96:	2e 5a       	subi	r18, 0xAE	; 174
    1e98:	3f 4f       	sbci	r19, 0xFF	; 255
    1e9a:	b9 01       	movw	r22, r18
    1e9c:	0e 94 8f 0b 	call	0x171e	; 0x171e <SSD_u8intNumbers>

	/*******************start second led*********************/
	i=5;
    1ea0:	fe 01       	movw	r30, r28
    1ea2:	e8 5b       	subi	r30, 0xB8	; 184
    1ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea6:	85 e0       	ldi	r24, 0x05	; 5
    1ea8:	80 83       	st	Z, r24
	SSD_u8intNumbers(i,&SSD2);
    1eaa:	fe 01       	movw	r30, r28
    1eac:	e8 5b       	subi	r30, 0xB8	; 184
    1eae:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb0:	80 81       	ld	r24, Z
    1eb2:	be 01       	movw	r22, r28
    1eb4:	6c 59       	subi	r22, 0x9C	; 156
    1eb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb8:	0e 94 8f 0b 	call	0x171e	; 0x171e <SSD_u8intNumbers>
	j=0;
    1ebc:	fe 01       	movw	r30, r28
    1ebe:	e9 5b       	subi	r30, 0xB9	; 185
    1ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec2:	10 82       	st	Z, r1
	SSD_u8intNumbers(j,&SSD1);
    1ec4:	fe 01       	movw	r30, r28
    1ec6:	e9 5b       	subi	r30, 0xB9	; 185
    1ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eca:	80 81       	ld	r24, Z
    1ecc:	9e 01       	movw	r18, r28
    1ece:	2e 5a       	subi	r18, 0xAE	; 174
    1ed0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed2:	b9 01       	movw	r22, r18
    1ed4:	0e 94 8f 0b 	call	0x171e	; 0x171e <SSD_u8intNumbers>
	LED_u8TurnOff(&LED1);
    1ed8:	ce 01       	movw	r24, r28
    1eda:	87 5b       	subi	r24, 0xB7	; 183
    1edc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ede:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <LED_u8TurnOff>
	LED_u8TurnOn(&LED2);
    1ee2:	ce 01       	movw	r24, r28
    1ee4:	84 5b       	subi	r24, 0xB4	; 180
    1ee6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee8:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <LED_u8TurnOn>
	for(i=5 ; i >=0 ; i--)
    1eec:	fe 01       	movw	r30, r28
    1eee:	e8 5b       	subi	r30, 0xB8	; 184
    1ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef2:	85 e0       	ldi	r24, 0x05	; 5
    1ef4:	80 83       	st	Z, r24
    1ef6:	84 c0       	rjmp	.+264    	; 0x2000 <TRAFFICLIGHT_voidAPP+0x504>
	{
		SSD_u8intNumbers(i,&SSD2);
    1ef8:	fe 01       	movw	r30, r28
    1efa:	e8 5b       	subi	r30, 0xB8	; 184
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	80 81       	ld	r24, Z
    1f00:	be 01       	movw	r22, r28
    1f02:	6c 59       	subi	r22, 0x9C	; 156
    1f04:	7f 4f       	sbci	r23, 0xFF	; 255
    1f06:	0e 94 8f 0b 	call	0x171e	; 0x171e <SSD_u8intNumbers>
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	aa e7       	ldi	r26, 0x7A	; 122
    1f10:	b4 e4       	ldi	r27, 0x44	; 68
    1f12:	8f a3       	std	Y+39, r24	; 0x27
    1f14:	98 a7       	std	Y+40, r25	; 0x28
    1f16:	a9 a7       	std	Y+41, r26	; 0x29
    1f18:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f1a:	6f a1       	ldd	r22, Y+39	; 0x27
    1f1c:	78 a5       	ldd	r23, Y+40	; 0x28
    1f1e:	89 a5       	ldd	r24, Y+41	; 0x29
    1f20:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	4a ef       	ldi	r20, 0xFA	; 250
    1f28:	54 e4       	ldi	r21, 0x44	; 68
    1f2a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	8b a3       	std	Y+35, r24	; 0x23
    1f34:	9c a3       	std	Y+36, r25	; 0x24
    1f36:	ad a3       	std	Y+37, r26	; 0x25
    1f38:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f3a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f3c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f3e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f40:	9e a1       	ldd	r25, Y+38	; 0x26
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	40 e8       	ldi	r20, 0x80	; 128
    1f48:	5f e3       	ldi	r21, 0x3F	; 63
    1f4a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f4e:	88 23       	and	r24, r24
    1f50:	2c f4       	brge	.+10     	; 0x1f5c <TRAFFICLIGHT_voidAPP+0x460>
		__ticks = 1;
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	9a a3       	std	Y+34, r25	; 0x22
    1f58:	89 a3       	std	Y+33, r24	; 0x21
    1f5a:	3f c0       	rjmp	.+126    	; 0x1fda <TRAFFICLIGHT_voidAPP+0x4de>
	else if (__tmp > 65535)
    1f5c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f5e:	7c a1       	ldd	r23, Y+36	; 0x24
    1f60:	8d a1       	ldd	r24, Y+37	; 0x25
    1f62:	9e a1       	ldd	r25, Y+38	; 0x26
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	3f ef       	ldi	r19, 0xFF	; 255
    1f68:	4f e7       	ldi	r20, 0x7F	; 127
    1f6a:	57 e4       	ldi	r21, 0x47	; 71
    1f6c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f70:	18 16       	cp	r1, r24
    1f72:	4c f5       	brge	.+82     	; 0x1fc6 <TRAFFICLIGHT_voidAPP+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f74:	6f a1       	ldd	r22, Y+39	; 0x27
    1f76:	78 a5       	ldd	r23, Y+40	; 0x28
    1f78:	89 a5       	ldd	r24, Y+41	; 0x29
    1f7a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	40 e2       	ldi	r20, 0x20	; 32
    1f82:	51 e4       	ldi	r21, 0x41	; 65
    1f84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	bc 01       	movw	r22, r24
    1f8e:	cd 01       	movw	r24, r26
    1f90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	9a a3       	std	Y+34, r25	; 0x22
    1f9a:	89 a3       	std	Y+33, r24	; 0x21
    1f9c:	0f c0       	rjmp	.+30     	; 0x1fbc <TRAFFICLIGHT_voidAPP+0x4c0>
    1f9e:	88 ec       	ldi	r24, 0xC8	; 200
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	98 a3       	std	Y+32, r25	; 0x20
    1fa4:	8f 8f       	std	Y+31, r24	; 0x1f
    1fa6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fa8:	98 a1       	ldd	r25, Y+32	; 0x20
    1faa:	01 97       	sbiw	r24, 0x01	; 1
    1fac:	f1 f7       	brne	.-4      	; 0x1faa <TRAFFICLIGHT_voidAPP+0x4ae>
    1fae:	98 a3       	std	Y+32, r25	; 0x20
    1fb0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb2:	89 a1       	ldd	r24, Y+33	; 0x21
    1fb4:	9a a1       	ldd	r25, Y+34	; 0x22
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	9a a3       	std	Y+34, r25	; 0x22
    1fba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fbc:	89 a1       	ldd	r24, Y+33	; 0x21
    1fbe:	9a a1       	ldd	r25, Y+34	; 0x22
    1fc0:	00 97       	sbiw	r24, 0x00	; 0
    1fc2:	69 f7       	brne	.-38     	; 0x1f9e <TRAFFICLIGHT_voidAPP+0x4a2>
    1fc4:	14 c0       	rjmp	.+40     	; 0x1fee <TRAFFICLIGHT_voidAPP+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc6:	6b a1       	ldd	r22, Y+35	; 0x23
    1fc8:	7c a1       	ldd	r23, Y+36	; 0x24
    1fca:	8d a1       	ldd	r24, Y+37	; 0x25
    1fcc:	9e a1       	ldd	r25, Y+38	; 0x26
    1fce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	9a a3       	std	Y+34, r25	; 0x22
    1fd8:	89 a3       	std	Y+33, r24	; 0x21
    1fda:	89 a1       	ldd	r24, Y+33	; 0x21
    1fdc:	9a a1       	ldd	r25, Y+34	; 0x22
    1fde:	9e 8f       	std	Y+30, r25	; 0x1e
    1fe0:	8d 8f       	std	Y+29, r24	; 0x1d
    1fe2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fe4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fe6:	01 97       	sbiw	r24, 0x01	; 1
    1fe8:	f1 f7       	brne	.-4      	; 0x1fe6 <TRAFFICLIGHT_voidAPP+0x4ea>
    1fea:	9e 8f       	std	Y+30, r25	; 0x1e
    1fec:	8d 8f       	std	Y+29, r24	; 0x1d
	SSD_u8intNumbers(i,&SSD2);
	j=0;
	SSD_u8intNumbers(j,&SSD1);
	LED_u8TurnOff(&LED1);
	LED_u8TurnOn(&LED2);
	for(i=5 ; i >=0 ; i--)
    1fee:	de 01       	movw	r26, r28
    1ff0:	a8 5b       	subi	r26, 0xB8	; 184
    1ff2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	e8 5b       	subi	r30, 0xB8	; 184
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	80 81       	ld	r24, Z
    1ffc:	81 50       	subi	r24, 0x01	; 1
    1ffe:	8c 93       	st	X, r24
    2000:	fe 01       	movw	r30, r28
    2002:	e8 5b       	subi	r30, 0xB8	; 184
    2004:	ff 4f       	sbci	r31, 0xFF	; 255
    2006:	80 81       	ld	r24, Z
    2008:	88 23       	and	r24, r24
    200a:	0c f0       	brlt	.+2      	; 0x200e <TRAFFICLIGHT_voidAPP+0x512>
    200c:	75 cf       	rjmp	.-278    	; 0x1ef8 <TRAFFICLIGHT_voidAPP+0x3fc>
	{
		SSD_u8intNumbers(i,&SSD2);
		_delay_ms(1000);
	}
	/*******************start third led*********************/
	i=0;
    200e:	fe 01       	movw	r30, r28
    2010:	e8 5b       	subi	r30, 0xB8	; 184
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	10 82       	st	Z, r1
	SSD_u8intNumbers(i,&SSD2);
    2016:	fe 01       	movw	r30, r28
    2018:	e8 5b       	subi	r30, 0xB8	; 184
    201a:	ff 4f       	sbci	r31, 0xFF	; 255
    201c:	80 81       	ld	r24, Z
    201e:	be 01       	movw	r22, r28
    2020:	6c 59       	subi	r22, 0x9C	; 156
    2022:	7f 4f       	sbci	r23, 0xFF	; 255
    2024:	0e 94 8f 0b 	call	0x171e	; 0x171e <SSD_u8intNumbers>
	j=3;
    2028:	fe 01       	movw	r30, r28
    202a:	e9 5b       	subi	r30, 0xB9	; 185
    202c:	ff 4f       	sbci	r31, 0xFF	; 255
    202e:	83 e0       	ldi	r24, 0x03	; 3
    2030:	80 83       	st	Z, r24
	SSD_u8intNumbers(j,&SSD1);
    2032:	fe 01       	movw	r30, r28
    2034:	e9 5b       	subi	r30, 0xB9	; 185
    2036:	ff 4f       	sbci	r31, 0xFF	; 255
    2038:	80 81       	ld	r24, Z
    203a:	9e 01       	movw	r18, r28
    203c:	2e 5a       	subi	r18, 0xAE	; 174
    203e:	3f 4f       	sbci	r19, 0xFF	; 255
    2040:	b9 01       	movw	r22, r18
    2042:	0e 94 8f 0b 	call	0x171e	; 0x171e <SSD_u8intNumbers>
	LED_u8TurnOff(&LED2);
    2046:	ce 01       	movw	r24, r28
    2048:	84 5b       	subi	r24, 0xB4	; 180
    204a:	9f 4f       	sbci	r25, 0xFF	; 255
    204c:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <LED_u8TurnOff>
	LED_u8TurnOn(&LED3);
    2050:	ce 01       	movw	r24, r28
    2052:	81 5b       	subi	r24, 0xB1	; 177
    2054:	9f 4f       	sbci	r25, 0xFF	; 255
    2056:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <LED_u8TurnOn>
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	aa e7       	ldi	r26, 0x7A	; 122
    2060:	b4 e4       	ldi	r27, 0x44	; 68
    2062:	89 8f       	std	Y+25, r24	; 0x19
    2064:	9a 8f       	std	Y+26, r25	; 0x1a
    2066:	ab 8f       	std	Y+27, r26	; 0x1b
    2068:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    206a:	69 8d       	ldd	r22, Y+25	; 0x19
    206c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    206e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2070:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	4a ef       	ldi	r20, 0xFA	; 250
    2078:	54 e4       	ldi	r21, 0x44	; 68
    207a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	8d 8b       	std	Y+21, r24	; 0x15
    2084:	9e 8b       	std	Y+22, r25	; 0x16
    2086:	af 8b       	std	Y+23, r26	; 0x17
    2088:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    208a:	6d 89       	ldd	r22, Y+21	; 0x15
    208c:	7e 89       	ldd	r23, Y+22	; 0x16
    208e:	8f 89       	ldd	r24, Y+23	; 0x17
    2090:	98 8d       	ldd	r25, Y+24	; 0x18
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	40 e8       	ldi	r20, 0x80	; 128
    2098:	5f e3       	ldi	r21, 0x3F	; 63
    209a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    209e:	88 23       	and	r24, r24
    20a0:	2c f4       	brge	.+10     	; 0x20ac <TRAFFICLIGHT_voidAPP+0x5b0>
		__ticks = 1;
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	9c 8b       	std	Y+20, r25	; 0x14
    20a8:	8b 8b       	std	Y+19, r24	; 0x13
    20aa:	3f c0       	rjmp	.+126    	; 0x212a <TRAFFICLIGHT_voidAPP+0x62e>
	else if (__tmp > 65535)
    20ac:	6d 89       	ldd	r22, Y+21	; 0x15
    20ae:	7e 89       	ldd	r23, Y+22	; 0x16
    20b0:	8f 89       	ldd	r24, Y+23	; 0x17
    20b2:	98 8d       	ldd	r25, Y+24	; 0x18
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	3f ef       	ldi	r19, 0xFF	; 255
    20b8:	4f e7       	ldi	r20, 0x7F	; 127
    20ba:	57 e4       	ldi	r21, 0x47	; 71
    20bc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20c0:	18 16       	cp	r1, r24
    20c2:	4c f5       	brge	.+82     	; 0x2116 <TRAFFICLIGHT_voidAPP+0x61a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c4:	69 8d       	ldd	r22, Y+25	; 0x19
    20c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	40 e2       	ldi	r20, 0x20	; 32
    20d2:	51 e4       	ldi	r21, 0x41	; 65
    20d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	bc 01       	movw	r22, r24
    20de:	cd 01       	movw	r24, r26
    20e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20e4:	dc 01       	movw	r26, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	9c 8b       	std	Y+20, r25	; 0x14
    20ea:	8b 8b       	std	Y+19, r24	; 0x13
    20ec:	0f c0       	rjmp	.+30     	; 0x210c <TRAFFICLIGHT_voidAPP+0x610>
    20ee:	88 ec       	ldi	r24, 0xC8	; 200
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	9a 8b       	std	Y+18, r25	; 0x12
    20f4:	89 8b       	std	Y+17, r24	; 0x11
    20f6:	89 89       	ldd	r24, Y+17	; 0x11
    20f8:	9a 89       	ldd	r25, Y+18	; 0x12
    20fa:	01 97       	sbiw	r24, 0x01	; 1
    20fc:	f1 f7       	brne	.-4      	; 0x20fa <TRAFFICLIGHT_voidAPP+0x5fe>
    20fe:	9a 8b       	std	Y+18, r25	; 0x12
    2100:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2102:	8b 89       	ldd	r24, Y+19	; 0x13
    2104:	9c 89       	ldd	r25, Y+20	; 0x14
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	9c 8b       	std	Y+20, r25	; 0x14
    210a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    210c:	8b 89       	ldd	r24, Y+19	; 0x13
    210e:	9c 89       	ldd	r25, Y+20	; 0x14
    2110:	00 97       	sbiw	r24, 0x00	; 0
    2112:	69 f7       	brne	.-38     	; 0x20ee <TRAFFICLIGHT_voidAPP+0x5f2>
    2114:	14 c0       	rjmp	.+40     	; 0x213e <TRAFFICLIGHT_voidAPP+0x642>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2116:	6d 89       	ldd	r22, Y+21	; 0x15
    2118:	7e 89       	ldd	r23, Y+22	; 0x16
    211a:	8f 89       	ldd	r24, Y+23	; 0x17
    211c:	98 8d       	ldd	r25, Y+24	; 0x18
    211e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	9c 8b       	std	Y+20, r25	; 0x14
    2128:	8b 8b       	std	Y+19, r24	; 0x13
    212a:	8b 89       	ldd	r24, Y+19	; 0x13
    212c:	9c 89       	ldd	r25, Y+20	; 0x14
    212e:	98 8b       	std	Y+16, r25	; 0x10
    2130:	8f 87       	std	Y+15, r24	; 0x0f
    2132:	8f 85       	ldd	r24, Y+15	; 0x0f
    2134:	98 89       	ldd	r25, Y+16	; 0x10
    2136:	01 97       	sbiw	r24, 0x01	; 1
    2138:	f1 f7       	brne	.-4      	; 0x2136 <TRAFFICLIGHT_voidAPP+0x63a>
    213a:	98 8b       	std	Y+16, r25	; 0x10
    213c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);

	j=2;
    213e:	fe 01       	movw	r30, r28
    2140:	e9 5b       	subi	r30, 0xB9	; 185
    2142:	ff 4f       	sbci	r31, 0xFF	; 255
    2144:	82 e0       	ldi	r24, 0x02	; 2
    2146:	80 83       	st	Z, r24
	SSD_u8intNumbers(j,&SSD1);
    2148:	fe 01       	movw	r30, r28
    214a:	e9 5b       	subi	r30, 0xB9	; 185
    214c:	ff 4f       	sbci	r31, 0xFF	; 255
    214e:	80 81       	ld	r24, Z
    2150:	9e 01       	movw	r18, r28
    2152:	2e 5a       	subi	r18, 0xAE	; 174
    2154:	3f 4f       	sbci	r19, 0xFF	; 255
    2156:	b9 01       	movw	r22, r18
    2158:	0e 94 8f 0b 	call	0x171e	; 0x171e <SSD_u8intNumbers>
    215c:	be c0       	rjmp	.+380    	; 0x22da <TRAFFICLIGHT_voidAPP+0x7de>
	while(j >=0)
	{
		for(i=9 ; i >=0 ; i--)
    215e:	fe 01       	movw	r30, r28
    2160:	e8 5b       	subi	r30, 0xB8	; 184
    2162:	ff 4f       	sbci	r31, 0xFF	; 255
    2164:	89 e0       	ldi	r24, 0x09	; 9
    2166:	80 83       	st	Z, r24
    2168:	84 c0       	rjmp	.+264    	; 0x2272 <TRAFFICLIGHT_voidAPP+0x776>
		{
			SSD_u8intNumbers(i,&SSD2);
    216a:	fe 01       	movw	r30, r28
    216c:	e8 5b       	subi	r30, 0xB8	; 184
    216e:	ff 4f       	sbci	r31, 0xFF	; 255
    2170:	80 81       	ld	r24, Z
    2172:	be 01       	movw	r22, r28
    2174:	6c 59       	subi	r22, 0x9C	; 156
    2176:	7f 4f       	sbci	r23, 0xFF	; 255
    2178:	0e 94 8f 0b 	call	0x171e	; 0x171e <SSD_u8intNumbers>
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	aa e7       	ldi	r26, 0x7A	; 122
    2182:	b4 e4       	ldi	r27, 0x44	; 68
    2184:	8b 87       	std	Y+11, r24	; 0x0b
    2186:	9c 87       	std	Y+12, r25	; 0x0c
    2188:	ad 87       	std	Y+13, r26	; 0x0d
    218a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    218c:	6b 85       	ldd	r22, Y+11	; 0x0b
    218e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2190:	8d 85       	ldd	r24, Y+13	; 0x0d
    2192:	9e 85       	ldd	r25, Y+14	; 0x0e
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	4a ef       	ldi	r20, 0xFA	; 250
    219a:	54 e4       	ldi	r21, 0x44	; 68
    219c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	8f 83       	std	Y+7, r24	; 0x07
    21a6:	98 87       	std	Y+8, r25	; 0x08
    21a8:	a9 87       	std	Y+9, r26	; 0x09
    21aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21ac:	6f 81       	ldd	r22, Y+7	; 0x07
    21ae:	78 85       	ldd	r23, Y+8	; 0x08
    21b0:	89 85       	ldd	r24, Y+9	; 0x09
    21b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	40 e8       	ldi	r20, 0x80	; 128
    21ba:	5f e3       	ldi	r21, 0x3F	; 63
    21bc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21c0:	88 23       	and	r24, r24
    21c2:	2c f4       	brge	.+10     	; 0x21ce <TRAFFICLIGHT_voidAPP+0x6d2>
		__ticks = 1;
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	9e 83       	std	Y+6, r25	; 0x06
    21ca:	8d 83       	std	Y+5, r24	; 0x05
    21cc:	3f c0       	rjmp	.+126    	; 0x224c <TRAFFICLIGHT_voidAPP+0x750>
	else if (__tmp > 65535)
    21ce:	6f 81       	ldd	r22, Y+7	; 0x07
    21d0:	78 85       	ldd	r23, Y+8	; 0x08
    21d2:	89 85       	ldd	r24, Y+9	; 0x09
    21d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	3f ef       	ldi	r19, 0xFF	; 255
    21da:	4f e7       	ldi	r20, 0x7F	; 127
    21dc:	57 e4       	ldi	r21, 0x47	; 71
    21de:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21e2:	18 16       	cp	r1, r24
    21e4:	4c f5       	brge	.+82     	; 0x2238 <TRAFFICLIGHT_voidAPP+0x73c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	40 e2       	ldi	r20, 0x20	; 32
    21f4:	51 e4       	ldi	r21, 0x41	; 65
    21f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	bc 01       	movw	r22, r24
    2200:	cd 01       	movw	r24, r26
    2202:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	9e 83       	std	Y+6, r25	; 0x06
    220c:	8d 83       	std	Y+5, r24	; 0x05
    220e:	0f c0       	rjmp	.+30     	; 0x222e <TRAFFICLIGHT_voidAPP+0x732>
    2210:	88 ec       	ldi	r24, 0xC8	; 200
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	9c 83       	std	Y+4, r25	; 0x04
    2216:	8b 83       	std	Y+3, r24	; 0x03
    2218:	8b 81       	ldd	r24, Y+3	; 0x03
    221a:	9c 81       	ldd	r25, Y+4	; 0x04
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	f1 f7       	brne	.-4      	; 0x221c <TRAFFICLIGHT_voidAPP+0x720>
    2220:	9c 83       	std	Y+4, r25	; 0x04
    2222:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2224:	8d 81       	ldd	r24, Y+5	; 0x05
    2226:	9e 81       	ldd	r25, Y+6	; 0x06
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	9e 83       	std	Y+6, r25	; 0x06
    222c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    222e:	8d 81       	ldd	r24, Y+5	; 0x05
    2230:	9e 81       	ldd	r25, Y+6	; 0x06
    2232:	00 97       	sbiw	r24, 0x00	; 0
    2234:	69 f7       	brne	.-38     	; 0x2210 <TRAFFICLIGHT_voidAPP+0x714>
    2236:	14 c0       	rjmp	.+40     	; 0x2260 <TRAFFICLIGHT_voidAPP+0x764>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2238:	6f 81       	ldd	r22, Y+7	; 0x07
    223a:	78 85       	ldd	r23, Y+8	; 0x08
    223c:	89 85       	ldd	r24, Y+9	; 0x09
    223e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2240:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	9e 83       	std	Y+6, r25	; 0x06
    224a:	8d 83       	std	Y+5, r24	; 0x05
    224c:	8d 81       	ldd	r24, Y+5	; 0x05
    224e:	9e 81       	ldd	r25, Y+6	; 0x06
    2250:	9a 83       	std	Y+2, r25	; 0x02
    2252:	89 83       	std	Y+1, r24	; 0x01
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	9a 81       	ldd	r25, Y+2	; 0x02
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	f1 f7       	brne	.-4      	; 0x2258 <TRAFFICLIGHT_voidAPP+0x75c>
    225c:	9a 83       	std	Y+2, r25	; 0x02
    225e:	89 83       	std	Y+1, r24	; 0x01

	j=2;
	SSD_u8intNumbers(j,&SSD1);
	while(j >=0)
	{
		for(i=9 ; i >=0 ; i--)
    2260:	de 01       	movw	r26, r28
    2262:	a8 5b       	subi	r26, 0xB8	; 184
    2264:	bf 4f       	sbci	r27, 0xFF	; 255
    2266:	fe 01       	movw	r30, r28
    2268:	e8 5b       	subi	r30, 0xB8	; 184
    226a:	ff 4f       	sbci	r31, 0xFF	; 255
    226c:	80 81       	ld	r24, Z
    226e:	81 50       	subi	r24, 0x01	; 1
    2270:	8c 93       	st	X, r24
    2272:	fe 01       	movw	r30, r28
    2274:	e8 5b       	subi	r30, 0xB8	; 184
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	80 81       	ld	r24, Z
    227a:	88 23       	and	r24, r24
    227c:	0c f0       	brlt	.+2      	; 0x2280 <TRAFFICLIGHT_voidAPP+0x784>
    227e:	75 cf       	rjmp	.-278    	; 0x216a <TRAFFICLIGHT_voidAPP+0x66e>
		{
			SSD_u8intNumbers(i,&SSD2);
			_delay_ms(1000);
		}
		if(i<=0 && j<=0)
    2280:	fe 01       	movw	r30, r28
    2282:	e8 5b       	subi	r30, 0xB8	; 184
    2284:	ff 4f       	sbci	r31, 0xFF	; 255
    2286:	80 81       	ld	r24, Z
    2288:	18 16       	cp	r1, r24
    228a:	34 f0       	brlt	.+12     	; 0x2298 <TRAFFICLIGHT_voidAPP+0x79c>
    228c:	fe 01       	movw	r30, r28
    228e:	e9 5b       	subi	r30, 0xB9	; 185
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	80 81       	ld	r24, Z
    2294:	18 16       	cp	r1, r24
    2296:	44 f5       	brge	.+80     	; 0x22e8 <TRAFFICLIGHT_voidAPP+0x7ec>
			break;
		i=9;
    2298:	fe 01       	movw	r30, r28
    229a:	e8 5b       	subi	r30, 0xB8	; 184
    229c:	ff 4f       	sbci	r31, 0xFF	; 255
    229e:	89 e0       	ldi	r24, 0x09	; 9
    22a0:	80 83       	st	Z, r24
		SSD_u8intNumbers(i,&SSD2);
    22a2:	fe 01       	movw	r30, r28
    22a4:	e8 5b       	subi	r30, 0xB8	; 184
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	80 81       	ld	r24, Z
    22aa:	be 01       	movw	r22, r28
    22ac:	6c 59       	subi	r22, 0x9C	; 156
    22ae:	7f 4f       	sbci	r23, 0xFF	; 255
    22b0:	0e 94 8f 0b 	call	0x171e	; 0x171e <SSD_u8intNumbers>
		j--;
    22b4:	de 01       	movw	r26, r28
    22b6:	a9 5b       	subi	r26, 0xB9	; 185
    22b8:	bf 4f       	sbci	r27, 0xFF	; 255
    22ba:	fe 01       	movw	r30, r28
    22bc:	e9 5b       	subi	r30, 0xB9	; 185
    22be:	ff 4f       	sbci	r31, 0xFF	; 255
    22c0:	80 81       	ld	r24, Z
    22c2:	81 50       	subi	r24, 0x01	; 1
    22c4:	8c 93       	st	X, r24
		SSD_u8intNumbers(j,&SSD1);
    22c6:	fe 01       	movw	r30, r28
    22c8:	e9 5b       	subi	r30, 0xB9	; 185
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	80 81       	ld	r24, Z
    22ce:	9e 01       	movw	r18, r28
    22d0:	2e 5a       	subi	r18, 0xAE	; 174
    22d2:	3f 4f       	sbci	r19, 0xFF	; 255
    22d4:	b9 01       	movw	r22, r18
    22d6:	0e 94 8f 0b 	call	0x171e	; 0x171e <SSD_u8intNumbers>
	LED_u8TurnOn(&LED3);
	_delay_ms(1000);

	j=2;
	SSD_u8intNumbers(j,&SSD1);
	while(j >=0)
    22da:	fe 01       	movw	r30, r28
    22dc:	e9 5b       	subi	r30, 0xB9	; 185
    22de:	ff 4f       	sbci	r31, 0xFF	; 255
    22e0:	80 81       	ld	r24, Z
    22e2:	88 23       	and	r24, r24
    22e4:	0c f0       	brlt	.+2      	; 0x22e8 <TRAFFICLIGHT_voidAPP+0x7ec>
    22e6:	3b cf       	rjmp	.-394    	; 0x215e <TRAFFICLIGHT_voidAPP+0x662>
		i=9;
		SSD_u8intNumbers(i,&SSD2);
		j--;
		SSD_u8intNumbers(j,&SSD1);
	}
	i=0;
    22e8:	fe 01       	movw	r30, r28
    22ea:	e8 5b       	subi	r30, 0xB8	; 184
    22ec:	ff 4f       	sbci	r31, 0xFF	; 255
    22ee:	10 82       	st	Z, r1
	SSD_u8intNumbers(i,&SSD2);
    22f0:	fe 01       	movw	r30, r28
    22f2:	e8 5b       	subi	r30, 0xB8	; 184
    22f4:	ff 4f       	sbci	r31, 0xFF	; 255
    22f6:	80 81       	ld	r24, Z
    22f8:	be 01       	movw	r22, r28
    22fa:	6c 59       	subi	r22, 0x9C	; 156
    22fc:	7f 4f       	sbci	r23, 0xFF	; 255
    22fe:	0e 94 8f 0b 	call	0x171e	; 0x171e <SSD_u8intNumbers>
	j=0;
    2302:	fe 01       	movw	r30, r28
    2304:	e9 5b       	subi	r30, 0xB9	; 185
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	10 82       	st	Z, r1
	SSD_u8intNumbers(j,&SSD1);
    230a:	fe 01       	movw	r30, r28
    230c:	e9 5b       	subi	r30, 0xB9	; 185
    230e:	ff 4f       	sbci	r31, 0xFF	; 255
    2310:	80 81       	ld	r24, Z
    2312:	9e 01       	movw	r18, r28
    2314:	2e 5a       	subi	r18, 0xAE	; 174
    2316:	3f 4f       	sbci	r19, 0xFF	; 255
    2318:	b9 01       	movw	r22, r18
    231a:	0e 94 8f 0b 	call	0x171e	; 0x171e <SSD_u8intNumbers>

}
    231e:	ca 5a       	subi	r28, 0xAA	; 170
    2320:	df 4f       	sbci	r29, 0xFF	; 255
    2322:	0f b6       	in	r0, 0x3f	; 63
    2324:	f8 94       	cli
    2326:	de bf       	out	0x3e, r29	; 62
    2328:	0f be       	out	0x3f, r0	; 63
    232a:	cd bf       	out	0x3d, r28	; 61
    232c:	cf 91       	pop	r28
    232e:	df 91       	pop	r29
    2330:	1f 91       	pop	r17
    2332:	0f 91       	pop	r16
    2334:	ff 90       	pop	r15
    2336:	ef 90       	pop	r14
    2338:	cf 90       	pop	r12
    233a:	bf 90       	pop	r11
    233c:	af 90       	pop	r10
    233e:	9f 90       	pop	r9
    2340:	8f 90       	pop	r8
    2342:	08 95       	ret

00002344 <main>:
#include "../HAL/LED/LED_config.h"

#include "TRAFFICLIGHT_interfase.h"

void main (void)
{
    2344:	8f 92       	push	r8
    2346:	9f 92       	push	r9
    2348:	af 92       	push	r10
    234a:	bf 92       	push	r11
    234c:	cf 92       	push	r12
    234e:	ef 92       	push	r14
    2350:	ff 92       	push	r15
    2352:	0f 93       	push	r16
    2354:	df 93       	push	r29
    2356:	cf 93       	push	r28
    2358:	00 d0       	rcall	.+0      	; 0x235a <main+0x16>
    235a:	00 d0       	rcall	.+0      	; 0x235c <main+0x18>
    235c:	0f 92       	push	r0
    235e:	cd b7       	in	r28, 0x3d	; 61
    2360:	de b7       	in	r29, 0x3e	; 62
	PORT_init();
    2362:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <PORT_init>
	while(1)
	{
		/******************* We CAN ADD More LED & 7-SEG in CONFIG FILE for each (LED & 7-SEG)**********************/
		/*                 |firstLED|    |secondLED|    |thirdLED|    |7-SEG1|    |7SEG2|                              */
		TRAFFICLIGHT_voidAPP(LED_RED,     LED_YELLOW,    LED_GREEN,    SSD1,       SSD2);
    2366:	00 d0       	rcall	.+0      	; 0x2368 <main+0x24>
    2368:	00 d0       	rcall	.+0      	; 0x236a <main+0x26>
    236a:	0f 92       	push	r0
    236c:	8d b7       	in	r24, 0x3d	; 61
    236e:	9e b7       	in	r25, 0x3e	; 62
    2370:	01 96       	adiw	r24, 0x01	; 1
    2372:	9a 83       	std	Y+2, r25	; 0x02
    2374:	89 83       	std	Y+1, r24	; 0x01
    2376:	8d e6       	ldi	r24, 0x6D	; 109
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	9c 83       	std	Y+4, r25	; 0x04
    237c:	8b 83       	std	Y+3, r24	; 0x03
    237e:	95 e0       	ldi	r25, 0x05	; 5
    2380:	9d 83       	std	Y+5, r25	; 0x05
    2382:	eb 81       	ldd	r30, Y+3	; 0x03
    2384:	fc 81       	ldd	r31, Y+4	; 0x04
    2386:	00 80       	ld	r0, Z
    2388:	8b 81       	ldd	r24, Y+3	; 0x03
    238a:	9c 81       	ldd	r25, Y+4	; 0x04
    238c:	01 96       	adiw	r24, 0x01	; 1
    238e:	9c 83       	std	Y+4, r25	; 0x04
    2390:	8b 83       	std	Y+3, r24	; 0x03
    2392:	e9 81       	ldd	r30, Y+1	; 0x01
    2394:	fa 81       	ldd	r31, Y+2	; 0x02
    2396:	00 82       	st	Z, r0
    2398:	89 81       	ldd	r24, Y+1	; 0x01
    239a:	9a 81       	ldd	r25, Y+2	; 0x02
    239c:	01 96       	adiw	r24, 0x01	; 1
    239e:	9a 83       	std	Y+2, r25	; 0x02
    23a0:	89 83       	std	Y+1, r24	; 0x01
    23a2:	9d 81       	ldd	r25, Y+5	; 0x05
    23a4:	91 50       	subi	r25, 0x01	; 1
    23a6:	9d 83       	std	Y+5, r25	; 0x05
    23a8:	ed 81       	ldd	r30, Y+5	; 0x05
    23aa:	ee 23       	and	r30, r30
    23ac:	51 f7       	brne	.-44     	; 0x2382 <main+0x3e>
    23ae:	60 91 72 00 	lds	r22, 0x0072
    23b2:	70 91 73 00 	lds	r23, 0x0073
    23b6:	80 91 74 00 	lds	r24, 0x0074
    23ba:	20 91 75 00 	lds	r18, 0x0075
    23be:	30 91 76 00 	lds	r19, 0x0076
    23c2:	40 91 77 00 	lds	r20, 0x0077
    23c6:	e0 90 78 00 	lds	r14, 0x0078
    23ca:	f0 90 79 00 	lds	r15, 0x0079
    23ce:	00 91 7a 00 	lds	r16, 0x007A
    23d2:	80 90 68 00 	lds	r8, 0x0068
    23d6:	90 90 69 00 	lds	r9, 0x0069
    23da:	a0 90 6a 00 	lds	r10, 0x006A
    23de:	b0 90 6b 00 	lds	r11, 0x006B
    23e2:	c0 90 6c 00 	lds	r12, 0x006C
    23e6:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <TRAFFICLIGHT_voidAPP>
    23ea:	0f 90       	pop	r0
    23ec:	0f 90       	pop	r0
    23ee:	0f 90       	pop	r0
    23f0:	0f 90       	pop	r0
    23f2:	0f 90       	pop	r0
    23f4:	b8 cf       	rjmp	.-144    	; 0x2366 <main+0x22>

000023f6 <__prologue_saves__>:
    23f6:	2f 92       	push	r2
    23f8:	3f 92       	push	r3
    23fa:	4f 92       	push	r4
    23fc:	5f 92       	push	r5
    23fe:	6f 92       	push	r6
    2400:	7f 92       	push	r7
    2402:	8f 92       	push	r8
    2404:	9f 92       	push	r9
    2406:	af 92       	push	r10
    2408:	bf 92       	push	r11
    240a:	cf 92       	push	r12
    240c:	df 92       	push	r13
    240e:	ef 92       	push	r14
    2410:	ff 92       	push	r15
    2412:	0f 93       	push	r16
    2414:	1f 93       	push	r17
    2416:	cf 93       	push	r28
    2418:	df 93       	push	r29
    241a:	cd b7       	in	r28, 0x3d	; 61
    241c:	de b7       	in	r29, 0x3e	; 62
    241e:	ca 1b       	sub	r28, r26
    2420:	db 0b       	sbc	r29, r27
    2422:	0f b6       	in	r0, 0x3f	; 63
    2424:	f8 94       	cli
    2426:	de bf       	out	0x3e, r29	; 62
    2428:	0f be       	out	0x3f, r0	; 63
    242a:	cd bf       	out	0x3d, r28	; 61
    242c:	09 94       	ijmp

0000242e <__epilogue_restores__>:
    242e:	2a 88       	ldd	r2, Y+18	; 0x12
    2430:	39 88       	ldd	r3, Y+17	; 0x11
    2432:	48 88       	ldd	r4, Y+16	; 0x10
    2434:	5f 84       	ldd	r5, Y+15	; 0x0f
    2436:	6e 84       	ldd	r6, Y+14	; 0x0e
    2438:	7d 84       	ldd	r7, Y+13	; 0x0d
    243a:	8c 84       	ldd	r8, Y+12	; 0x0c
    243c:	9b 84       	ldd	r9, Y+11	; 0x0b
    243e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2440:	b9 84       	ldd	r11, Y+9	; 0x09
    2442:	c8 84       	ldd	r12, Y+8	; 0x08
    2444:	df 80       	ldd	r13, Y+7	; 0x07
    2446:	ee 80       	ldd	r14, Y+6	; 0x06
    2448:	fd 80       	ldd	r15, Y+5	; 0x05
    244a:	0c 81       	ldd	r16, Y+4	; 0x04
    244c:	1b 81       	ldd	r17, Y+3	; 0x03
    244e:	aa 81       	ldd	r26, Y+2	; 0x02
    2450:	b9 81       	ldd	r27, Y+1	; 0x01
    2452:	ce 0f       	add	r28, r30
    2454:	d1 1d       	adc	r29, r1
    2456:	0f b6       	in	r0, 0x3f	; 63
    2458:	f8 94       	cli
    245a:	de bf       	out	0x3e, r29	; 62
    245c:	0f be       	out	0x3f, r0	; 63
    245e:	cd bf       	out	0x3d, r28	; 61
    2460:	ed 01       	movw	r28, r26
    2462:	08 95       	ret

00002464 <_exit>:
    2464:	f8 94       	cli

00002466 <__stop_program>:
    2466:	ff cf       	rjmp	.-2      	; 0x2466 <__stop_program>
